<!--
  This is the Apache Ant build file for Fabric.
  See doc/ant-dep-graph.png to visualize the inter-target dependencies.

  Targets are public (i.e., intended to be callable by the user) if and only if
  they have a description attribute.  Public targets will show up when the user
  runs "ant -p".  Internal targets should not have description attributes!
-->
<project name="fabric" default="build-all" basedir=".">
  <description>
    Fabric build file
  </description>

  <!--
  ****************************************************************************
    Global properties for this build.
  ****************************************************************************
  -->

  <!-- Import common definitions. -->
  <import file="common.xml" />

  <!-- Source directories -->
  <property name="src" location="${fabric.home}/src"/>
  <property name="system.src" location="${src}/system"/>
  <property name="compiler.src" location="${src}/compiler"/>
  <property name="bootstrap.src" location="${src}/bootstrap"/>
  <property name="runtime.src" location="${src}/runtime"/>
  <property name="arrays.src" location="${src}/arrays"/>
  <property name="signatures.fabil.src" location="${src}/signatures/fabil"/>
  <property name="signatures.fabric.src" location="${src}/signatures/fabric"/>

  <!-- Directories for class file targets -->
  <property name="bootstrap.classes" location="${fabric.home}/bs-classes"/>
  <property name="signatures.classes" location="${fabric.home}/sig-classes"/>
  <property name="signatures.fabil.classes"
      location="${signatures.classes}/fabil"/>
  <property name="signatures.fabric.classes"
      location="${signatures.classes}/fabric"/>

  <!-- Polyglot classpath -->
  <pathconvert property="polyglot.classpath" refid="polyglot.classpath"/>

  <!-- Timestamp file for bootstrap classes. -->
  <property name="bootstrap.tstamp" location="${bootstrap.classes}/.tstamp"/>

  <!-- Documentation directories -->
  <property name="doc" location="${fabric.home}/doc"/>
  <property name="manual.src" location="${doc}/manual/src"/>
  <property name="manual.tmp" location="${doc}/manual/tmp"/>
  <property name="manual.html" location="${doc}/manual/html"/>
  <property name="manual.pdf" location="${doc}/manual/manual.pdf"/>

  <!-- Configuration directory -->
  <property name="etc" location="${fabric.home}/etc"/>

  <!-- var directory (for store databases) -->
  <property name="var" location="${fabric.home}/var"/>

  <!-- Examples directory -->
  <property name="examples" location="${fabric.home}/examples"/>

  <!-- Tools directory -->
  <property name="tools" location="${fabric.home}/tools"/>

  <!-- Lib directory -->
  <property name="libs" location="${fabric.home}/src/lib"/>

  <!-- Tests directory -->
  <property name="tests" location="${fabric.home}/tests"/>

  <!-- tmp directory (for creating the distribution) -->
  <property name="tmp" location="${fabric.home}/tmp"/>

  <!-- RCS root locations -->
  <property name="git.root.fabric"
      value="${fabric.home}"/>
  <property name="git.root.jif"
      value="https://apl.cs.cornell.edu/git/jif"/>
  <property name="git.root.polyglot"
      value="git@github.com:polyglot-compiler/polyglot"/>

  <!-- Jif distribution location -->
  <property name="jif.url.prefix"
      value="http://www.cs.cornell.edu/jif/releases/jif-"/>
  <property name="jif.url.suffix"
      value=".zip"/>

  <!-- Polyglot distribution location -->
  <property name="polyglot.url.prefix"
      value="http://www.cs.cornell.edu/Projects/polyglot/src/polyglot-"/>
  <property name="polyglot.url.suffix"
      value="-src.zip"/>

  <!-- Jar files -->
  <property name="jar.base" location="${lib}/fabric.jar" />
  <property name="jar.runtime" location="${lib}/fabric-rt.jar" />
  <property name="jar.signature.fabil" location="${lib}/fabric-il-sig.jar" />
  <property name="jar.signature.fabric" location="${lib}/fabric-sig.jar" />
  <property name="jar.tools" location="${lib}/fabric-tools.jar" />

  <!--
  ****************************************************************************
    Configuration targets.
  ****************************************************************************
  -->

  <!-- Main configuration target. -->
  <target name="configure" description="Configures Fabric"
      depends="configure-buildstring,config.properties"
      unless="configure.up-to-date">

    <echo message="java version is ${java.version}"/>
    <echo message="current directory is ${user.dir}"/>
    <echo message="JDK home directory is ${jdk.home}"/>
    <echo message="Polyglot home directory is ${polyglot.home}"/>
    <echo message="Jif home directory is ${jif.home}" />
    <echo message="Fabric version is ${fabric.version.build}" />

    <!--
    ________________________________________________________________________
    Check configuration.
    -->

    <property file="config.properties" prefix="config" />

    <!-- Check for presence of JDK. -->
    <condition property="jdk.exists" value="true">
      <available file="${jdk.home}/bin/javac" />
    </condition>

    <!-- Check for presence of Polyglot. -->
    <condition property="polyglot.exists" value="true">
      <available classname="polyglot.main.Version"
          classpathref="polyglot.classpath" />
    </condition>

    <!-- Check for presence of Jif. -->
    <condition property="jif.exists" value="true">
      <available classname="jif.Version"
          classpathref="jif.classpath" />
    </condition>

    <!-- Error handling: JDK not found and jdk.home not set. -->
    <fail message="Failed to find javac. Edit 'config.properties' and set the 'jdk.home' property.">
      <condition>
        <and>
          <isfalse value="${jdk.exists}"/>
          <not><isset property="config.jdk.home"/></not>
        </and>
      </condition>
    </fail>

    <!-- Error handling: JDK not found. -->
    <fail message="Failed to find javac. Ensure the 'jdk.home' property is correct in 'config.properties'.">
      <condition>
        <isfalse value="${jdk.exists}"/>
      </condition>
    </fail>

    <!-- Error handling: Polyglot not found and polyglot.home not set. -->
    <fail message="Failed to find pre-packaged Polyglot (lib/polyglot.jar). If you wish to use a dev copy of Polyglot, edit 'config.properties' and set the 'polyglot.home' property.">
      <condition>
        <and>
          <isfalse value="${polyglot.exists}"/>
          <not><isset property="config.polyglot.home"/></not>
        </and>
      </condition>
    </fail>

    <!-- Error handling: Polyglot not found. -->
    <fail message="Failed to find Polyglot. Ensure the 'polyglot.home' property is correct in 'config.properties' and make sure Polyglot is built.">
      <condition>
        <isfalse value="${polyglot.exists}"/>
      </condition>
    </fail>

    <!-- Error handling: Jif not found and jif.home not set. -->
    <fail message="Failed to find pre-packaged Jif (lib/jif.jar). If you wish to use a dev copy of Jif, edit 'config.properties' and set the 'jif.home' property.">
      <condition>
        <and>
          <isfalse value="${jif.exists}" />
          <not><isset property="config.jif.home"/></not>
        </and>
      </condition>
    </fail>

    <!-- Error handling: Jif not found. -->
    <fail message="Failed to find Jif. Ensure the 'jif.home' property is correct in 'config.properties' and make sure Jif is built.">
      <condition>
        <isfalse value="${jif.exists}" />
      </condition>
    </fail>


    <property name="configure.up-to-date" value="true"/>
  </target>

  <!-- Configures Eclipse's .classpath file. -->
  <target name="eclipse" depends="eclipse-check"
      unless="eclipse.up-to-date"
      description="Configures Eclipse's .classpath file">
    <condition property="tools.jar-entry"
        value="&lt;classpathentry kind=&quot;lib&quot; path=&quot;${jdk.home}/lib/tools.jar&quot;/&gt;"
        else="">
      <available file="${jdk.home}/lib/tools.jar" />
    </condition>
    <copy file="eclipse/classpath.in" tofile=".classpath">
      <filterset>
        <filter token="TOOLS.JAR" value="${tools.jar-entry}" />
      </filterset>
    </copy>
  </target>

  <!-- Configures the executables in the bin directory. -->
  <target name="bin" depends="configure,bin-check" unless="bin.up-to-date"
      description="Configures the executables in the bin directory">
    <copy file="${bin}/defs.in" tofile="${bin}/defs" overwrite="true">
      <filterset>
        <filter token="JAVA_HOME" value="${jdk.home}"    />
        <filter token="TOP"       value="${fabric.home}"      />
        <filter token="POLYGLOT"  value="${polyglot.home}" />
        <filter token="JIF"       value="${jif.home}" />
      </filterset>
    </copy>
  </target>

  <!--
  ____________________________________________________________________________
    Configuration helper targets.
  -->

  <!-- Ensures config.properties exists. -->
  <target name="config.properties" depends="config.properties-check"
      unless="config.properties.exists">
    <copy file="config.properties.in" tofile="config.properties"/>
  </target>

  <target name="configure-buildstring" depends="configure-version"
      unless="fabric.version.build">
    <tstamp>
      <format property="now" timezone="America/New_York"
          pattern="yyyy-MM-dd HH:mm:ss z" />
    </tstamp>
    <property name="fabric.version.build" value="${fabric.version} (${now})" />
  </target>

  <target name="configure-version" unless="fabric.version">
    <property file="${fabric.home}/version.properties" prefix="fabric" />
    <!-- Handle branched versions. -->
    <condition
        property="fabric.version"
        value="${fabric.version.major}.${fabric.version.minor}.${fabric.version.patch}-${fabric.version.branch}">
      <and>
        <isset property="fabric.version.branch"/>
        <not>
          <or>
            <equals arg1="${fabric.version.branch}" arg2="" trim="true"/>
            <equals arg1="${fabric.version.branch}" arg2="master"
                trim="true"/>
          </or>
        </not>
      </and>
    </condition>
    <!-- Handle unbranched versions. -->
    <condition
        property="fabric.version"
        value="${fabric.version.major}.${fabric.version.minor}.${fabric.version.patch}">
      <not><isset property="fabric.version"/></not>
    </condition>
  </target>

  <target name="config.properties-check">
    <condition property="config.properties.exists" value="true">
      <resourceexists>
        <file file="config.properties"/>
      </resourceexists>
    </condition>
  </target>

  <target name="eclipse-check">
    <uptodate property="eclipse.up-to-date" targetfile=".classpath"
        srcfile="eclipse/classpath.in" />
  </target>

  <target name="bin-check">
    <uptodate property="bin.up-to-date" targetfile="bin/defs">
      <srcfiles file="bin/defs.in"/>
      <srcfiles file="config.properties"/>
    </uptodate>
  </target>

  <!--
  ****************************************************************************
    Targets for cleaning up the directory tree.
  ****************************************************************************
  -->

  <target name="dust"
      description="Cleans up the generated runtime and signatures">
    <delete dir="${runtime.classes}"/>
    <delete dir="${signatures.classes}"/>
    <delete file="${jar.runtime}" />
    <delete file="${jar.signature.fabil}" />
    <delete file="${jar.signature.fabric}" />
  </target>

  <target name="clean" depends="dust"
      description="Cleans up the directory tree: deletes the distribution directory and the classes directories">
    <!-- Delete the ${classes} and ${tmp} directory trees -->
    <delete dir="${classes}"/>
    <delete dir="${bootstrap.classes}"/>
    <delete dir="${tmp}"/>
    <delete dir="${var}"/>
    <delete file="${jar.base}" />
    <delete file="${jar.tools}" />

    <subant target="clean">
      <fileset dir="." includes="*/build.xml" />
      <filelist dir="${libs}" files="build.xml" />
    </subant>
  </target>

  <!-- Makes the directory tree truly pristine. -->
  <target name="clobber" depends="clean"
      description="Cleans up the directory tree, deleting generated binaries, scripts and source files">
    <delete>
      <fileset dir="${bin}">
        <include name="defs"/>
      </fileset>

      <fileset dir="${compiler.src}">
        <include name="**/Grm.java" />
        <include name="**/sym.java" />
        <include name="**/Lexer_c.java" />
        <include name="**/*_ppg.cup" />
      </fileset>
    </delete>

    <subant target="clobber">
      <fileset dir="." includes="*/build.xml" />
      <filelist dir="${libs}" files="build.xml" />
    </subant>
  </target>

  <!--
  ****************************************************************************
    Compilation targets.
  ****************************************************************************
  -->

  <!-- Main target for compiling Fabric -->
  <target name="build-all"
    depends="fabric-compiler,fabil-compiler,fabric-system,fabric-signatures,fabric-runtime,tools"
    description="Builds the Fabric compiler, system, runtime, and tools"/>

  <!-- This target is here for legacy reasons. -->
  <target name="all" depends="build-all" />

  <!-- Compiles the Fabric system -->
  <target name="fabric-system" depends="store,worker,dissemination"
      description="Builds the Fabric system"/>

  <!-- Compiles the Fabric compiler -->
  <target name="fabric-compiler" depends="init,fabil-compiler,bootstrap"
      description="Builds the Fabric compiler">
    <antcall target="standard-ext">
      <param name="ext" value="fabric" />
      <param name="ext.pkg" value="fabric" />
      <param name="parser.type" value="ppg" />
    </antcall>
  </target>

  <!-- Compiles the Bolt compiler -->
  <target name="bolt-compiler" depends="init,fabil-compiler,bootstrap"
      description="Builds the Bolt compiler">
    <antcall target="standard-ext">
      <param name="ext" value="bolt" />
      <param name="ext.pkg" value="bolt" />
      <param name="parser.type" value="ppg" />
    </antcall>
  </target>

  <!-- Compiles the FabIL compiler -->
  <target name="fabil-compiler" depends="init,bootstrap,native,eclipse"
      description="Builds the FabIL compiler">
    <antcall target="standard-ext-lexer">
      <param name="ext" value="fabric" />
      <param name="ext.pkg" value="fabric" />
    </antcall>

    <antcall target="standard-ext-ppg-parser">
      <param name="ext" value="fabric" />
      <param name="ext.pkg" value="fabric" />
    </antcall>

    <antcall target="standard-ext">
      <param name="ext" value="fabil" />
      <param name="ext.pkg" value="fabil" />
      <param name="parser.type" value="ppg" />
    </antcall>
  </target>

  <!-- Compiles the Fabric signatures -->
  <target name="fabric-signatures"
      depends="init,bootstrap,bin,fabric-compiler,fabil-runtime,worker,store"
      description="Compiles the Fabric signature classes">
    <path id="fabric-signatures.bootcp">
      <pathelement location="${runtime.classes}"/>
      <pathelement location="${classes}"/>
    </path>
    <pathconvert
        property="fabric-signatures.bootcp"
        refid="fabric-signatures.bootcp"/>

    <fabsigc dest="${signatures.fabric.classes}">
      <arg value="-platform-mode" /> 
      <arg value="-bootclasspath" />
      <arg value="${fabric-signatures.bootcp}"/>
      <arg value="-nooutput"/>
      <arg value="-trusted-providers" />
      <arg value="-sigcp"/>
      <arg value="${signatures.fabric.src}" />
      <fileset dir="${signatures.fabric.src}" includes="**/*.fab" />
    </fabsigc>

    <!--
      Clean out classes that happened to be pulled in as dependencies.
      This ensures that the classes left in the sig-classes directory is the
      same regardless of whether the Fabric jars are present when building.
    -->
    <delete>
      <fileset dir="${signatures.fabric.classes}" includes="**">
        <present present="srconly" targetdir="${signatures.fabric.src}">
          <mapper type="regexp"
              from="^([^$$]*?)(|\$$.*|_JIF_IMPL)\.(java|class)$$"
              to="\1.fab"/>
        </present>
      </fileset>
    </delete>
  </target>

  <!-- Compiles the FabIL signatures -->
  <target name="fabil-signatures"
      depends="init,bootstrap,fabil-compiler,bin,native"
      description="Compiles the FabIL signature clasess">
    <path id="fabil-signatures.bootcp">
      <path refid="polyglot.classpath"/>
      <path refid="lib.classpath"/>
      <pathelement location="${bootstrap.classes}"/>
    </path>
    <pathconvert
        property="fabil-signatures.bootcp"
        refid="fabil-signatures.bootcp"/>

    <path id="fabil-signatures.sigcp">
      <pathelement location="${signatures.fabil.src}"/>
      <pathelement location="${runtime.src}"/>
    </path>
    <pathconvert
        property="fabil-signatures.sigcp"
        refid="fabil-signatures.sigcp"/>

    <filsigc dest="${signatures.fabil.classes}">
      <arg value="-platform-mode" /> 
      <arg value="-jvm-cp" />
      <arg value="${bootstrap.classes}" />
      <arg value="-nooutput" />
      <arg value="-addbootcp" />
      <arg value="${fabil-signatures.bootcp}"/>
      <arg value="-sigcp" />
      <arg value="${fabil-signatures.sigcp}" />
      <fileset dir="${signatures.fabil.src}" includes="**/*.fil" />
    </filsigc>

    <!--
      Clean out classes that happened to be pulled in as dependencies.
      This ensures that the classes left in the sig-classes directory is the
      same regardless of whether the Fabric jars are present when building.
    -->
    <delete>
      <fileset dir="${signatures.fabil.classes}" includes="**">
        <present present="srconly" targetdir="${signatures.fabil.src}">
          <mapper type="regexp"
              from="^([^$$]*?)(|\$$.*|_JIF_IMPL)\.(java|class)$$"
              to="\1.fil"/>
        </present>
      </fileset>
    </delete>
  </target>

  <!-- Compiles the Fabric tools -->
  <target name="tools" depends="fabil-runtime,fabric-compiler"
      description="Builds all Fabric tools">
    <subant target="build-all">
      <fileset dir="${tools}" includes="build.xml" />
    </subant>
  </target>

  <!-- Compiles the Fabric libraries -->
  <target name="libs" depends="build-all"
      description="Builds the libraries built on top of Fabric">
    <subant target="build-all">
      <fileset dir="${libs}" includes="build.xml" />
    </subant>
  </target>

  <!-- Compiles the Fabric examples -->
  <target name="examples" depends="build-all"
      description="Builds the Fabric application examples">
    <subant target="build-all">
      <fileset dir="${examples}" includes="build.xml" />
    </subant>
  </target>

  <target name="regen-bootstrap"
      description="Create bootstrap classes of collections written in Fabric.">

  <echo message="This will overwrite the contents of ${bootstrap.src} "/>
  <echo message="with skeleton classes generated from ${runtime.src}"/>
  <input message="Continue?" validargs="y,n" addproperty="do.regen" />

  <condition property="do.abort">
    <equals arg1="n" arg2="${do.regen}"/>
  </condition>
  <fail if="do.abort">Bootstrap regeneration aborted by user.</fail>
    <filc dest="${bootstrap.src}">
      <arg value="-generate-native-skeletons" /> 
      <arg value="-platform-mode" /> 
      <arg value="-noserial" /> 
      <arg value="-c" />
      <arg value="-sourcepath"/>
      <arg value="${runtime.src}"/>
      <fileset dir="${runtime.src}"
          includes="**/*.fil"
          excludes="**/*.fab"/>
      <fileset dir="${arrays.src}"
          includes="**/*.fil"
          excludes="**/*.fab"/>
    </filc>
  </target>

  <!--
  ____________________________________________________________________________
    Compilation helper targets.
  -->

  <!-- Initializes the build -->
  <target name="init" depends="configure">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${classes}"/>
    <mkdir dir="${bootstrap.classes}"/>
    <mkdir dir="${runtime.classes}"/>
    <mkdir dir="${signatures.fabil.classes}"/>
    <mkdir dir="${signatures.fabric.classes}"/>
  </target>

  <!-- Compiles the bootstrap classes. -->
  <target name="bootstrap" depends="init,bootstrap-check"
      unless="bootstrap.up-to-date">
    <javac source="1.8" target="1.8" encoding="utf-8"
        srcdir="${bootstrap.src}" destdir="${bootstrap.classes}"
        includeAntRuntime="false" debug="on">
      <include name="**/*.java" />
      <sourcepath path="${system.src}"/>
      <classpath>
        <path refid="lib.classpath"/>
        <path refid="polyglot.classpath" />
      </classpath>
    </javac>
    <touch file="${bootstrap.tstamp}"/>

    <!--
      The bootstrap classes pull in stuff from the system.  Give all class
      files in ${bootstrap.classes} an ancient timestamp so they get recompiled
      when we build things for real.
    -->
    <touch millis="0">
      <fileset dir="${bootstrap.classes}">
        <include name="**/*.class"/>
      </fileset>
    </touch>
  </target>

  <target name="bootstrap-check">
    <uptodate property="bootstrap.up-to-date" targetfile="${bootstrap.tstamp}">
      <srcfiles dir="${bootstrap.src}" includes="**" />
    </uptodate>
  </target>

  <!-- Compiles the Fabric runtime classes that are implemented in Java -->
  <target name="native" depends="init,bootstrap,native-check"
      unless="native.up-to-date">
    <javac source="1.8" target="1.8" encoding="utf-8"
        srcdir="${system.src}" destdir="${classes}"
        includeAntRuntime="false" debug="on">
      <include name="fabric/lang/**" />
      <include name="fabric/common/**" />
      <exclude name="**/package-info.java" />
      <classpath>
        <pathelement location="${bootstrap.classes}" />
        <path refid="lib.classpath"/>
        <path refid="polyglot.classpath" />
      </classpath>
    </javac>
  </target>

  <target name="native-check">
    <uptodate property="native.up-to-date">
      <srcfiles dir="${system.src}" includes="fabric/lang/**" />
      <srcfiles dir="${system.src}" includes="fabric/common/util/**" />
      <globmapper from="*.java" to="../../classes/*.class" />
    </uptodate>
  </target>

  <!-- Compiles the Fabric store -->
  <target name="store" depends="init,native,fabil-runtime">
    <javac source="1.8" target="1.8" encoding="utf-8"
        srcdir="${system.src}" destdir="${classes}"
        includeAntRuntime="false" debug="on">
      <include name="fabric/common/**" />
      <include name="fabric/messages/**" />
      <include name="fabric/store/**" />
      <exclude name="**/package-info.java" />
      <classpath>
        <pathelement location="${runtime.classes}" />
        <path refid="lib.classpath"/>
      </classpath>
    </javac>
  </target>

  <!-- Compiles the Fabric worker -->
  <target name="worker" depends="init,bootstrap,native,fabil-runtime">
    <javac source="1.8" target="1.8" encoding="utf-8"
        srcdir="${system.src}" destdir="${classes}"
        includeAntRuntime="false" debug="on">
      <include name="fabric/worker/**" />
      <include name="fabric/common/**" />
      <include name="fabric/messages/**" />
      <exclude name="**/package-info.java" />
      <classpath>
        <pathelement location="${bootstrap.classes}" />
        <path refid="lib.classpath"/>
        <path refid="polyglot.classpath" />
      </classpath>
    </javac>
  </target>

  <!-- Compiles the Fabric dissemination node -->
  <target name="dissemination" depends="bootstrap,worker">
    <javac source="1.8" target="1.8" encoding="utf-8"
        srcdir="${system.src}" destdir="${classes}"
        includeAntRuntime="false" debug="on">
      <include name="fabric/dissemination/**" />
      <exclude name="**/package-info.java" />
      <classpath>
        <pathelement location="${bootstrap.classes}" />
        <path refid="lib.classpath"/>
      </classpath>
    </javac>
  </target>

  <!--
    Compiles the Fabric array classes.

    Though these are technically part of fabil-runtime, they need to be
    compiled separately because the compiler uses the generated class files for
    typing information.  Things are done this way because we don't want to
    hardcode this typing information in the compiler in case it changes due to
    a change in the Fabric translation.
  -->
  <target name="fabric-arrays"
      depends="init,bin,bootstrap,fabil-compiler,fabil-signatures">
    <javac source="1.8" target="1.8" encoding="utf-8"
        srcdir="${system.src}" destdir="${classes}"
        includeAntRuntime="false" debug="on">
      <include name="fabric/worker/RetryException.java" />
      <include name="fabric/worker/UserAbortException.java" />
    </javac>

    <filc dest="${runtime.classes}">
      <arg value="-jvm-cp" />
      <arg value="${bootstrap.classes}" />
      <arg value="-addbootcp" />
      <arg value="${bootstrap.classes}" />
      <arg value="-platform-mode"/>
      <fileset dir="${arrays.src}" includes="fabric/lang/arrays/*.fil"/>
    </filc>
  </target>

  <!-- Compiles the part of the Fabric runtime that is implemented in FabIL -->
  <target name="fabil-runtime"
      depends="init,bootstrap,fabil-compiler,fabil-signatures,fabric-arrays">
    <path id="fabil-runtime.bootcp">
      <path refid="polyglot.classpath"/>
      <path refid="lib.classpath"/>
      <pathelement location="${bootstrap.classes}"/>
    </path>
    <pathconvert
        property="fabil-runtime.bootcp"
        refid="fabil-runtime.bootcp"/>

    <filc dest="${runtime.classes}">
      <arg value="-jvm-cp" />
      <arg value="${bootstrap.classes}" />
      <arg value="-j" />
      <arg value="-Xms256M" />
      <arg value="-addbootcp" />
      <arg value="${fabil-runtime.bootcp}" />
      <arg value="-platform-mode"/>
      <fileset dir="${runtime.src}" includes="**/*.fil" />
    </filc>
  </target>

  <!-- Compiles the part of the runtime that is implemented in Fabric -->
  <target name="fabric-runtime"
      depends="fabric-signatures,fabil-runtime">
    <fabc dest="${runtime.classes}">
      <arg value="-j" />
      <arg value="-Xms256M" />
      <arg value="-trusted-providers" />
      <arg value="-platform-mode" />
      <arg value="-sourcepath" />
      <arg value="${runtime.src}" />
      <fileset dir="${runtime.src}"
          includes="**/*.fab" />
    </fabc>
  </target>

  <!--
  ****************************************************************************
    Version-management targets
  ****************************************************************************
  -->

  <target name="bump-version">
    <antcall target="bump-patch" />
  </target>

  <target name="bump-major">
    <propertyfile file="${fabric.home}/version.properties">
      <entry key="version.major" type="int" operation="+" value="1"
          pattern="0" />
      <entry key="version.minor" type="int" value="0" />
      <entry key="version.patch" type="int" value="0" />
    </propertyfile>

    <!-- Reread version info and regenerate version files -->
    <antcall target="configure-buildstring" />
    <antcall target="gen-version" />
  </target>

  <target name="bump-minor">
    <propertyfile file="${fabric.home}/version.properties">
      <entry key="version.minor" type="int" operation="+" value="1"
          pattern="0" />
      <entry key="version.patch" type="int" value="0" />
    </propertyfile>

    <!-- Reread version info and regenerate version files -->
    <antcall target="configure-buildstring" />
    <antcall target="gen-version" />
  </target>

  <target name="bump-patch">
    <propertyfile file="${fabric.home}/version.properties">
      <entry key="version.patch" type="int" operation="+" value="1"
          pattern="0" />
    </propertyfile>

    <!-- Reread version info and regenerate version files -->
    <antcall target="configure-buildstring" />
    <antcall target="gen-version" />
  </target>

  <target name="mark-branch" depends="get-current-fabric-branch">
    <!-- Ask for branch name. -->
    <input message="Branch name?"
        defaultvalue="${fabric.current.branch}"
        addproperty="fabric.version.newbranch"/>

    <propertyfile file="${fabric.home}/version.properties">
      <entry key="version.branch" type="string"
          value="${fabric.version.newbranch}"/>
    </propertyfile>

    <!-- Reread version info and regenerate version files -->
    <antcall target="configure-buildstring" />
    <antcall target="gen-version" />
  </target>

  <!--
    Configures properties for dependency versions.
  -->
  <target name="configure-dependency-versions" depends="mkdir-tmp">
    <!--
      Generate code that will determine Polyglot and Jif versions. This is done
      this way because we won't have Polyglot's build.properties file if we're
      only building against polyglot.jar.
    -->
    <echo file="${tmp}/VersionInfo.java">
import polyglot.frontend.JLVersion;
import jif.Version;

public class VersionInfo {
  public static void main(String[] args) {
    polyglot.main.Version ver;
    if ("jif".equals(args[0])) {
      ver = new Version();
    } else if ("polyglot".equals(args[0])) {
      ver = new JLVersion();
    } else return;

    System.out.print(ver.major() + "." + ver.minor() + "." + ver.patch_level());
  }
}
</echo>
    <javac
        srcdir="${tmp}"
        destdir="${tmp}"
        encoding="utf-8"
        includes="VersionInfo.java"
        classpathref="jif.classpath"
        includeAntRuntime="false"/>

    <!-- Get Polyglot version. -->
    <java classname="VersionInfo" outputproperty="polyglot.version">
      <arg value="polyglot"/>
      <classpath>
        <pathelement location="${tmp}"/>
        <path refid="jif.classpath"/>
      </classpath>
    </java>

    <!-- Get Jif version. -->
    <java classname="VersionInfo" outputproperty="jif.version">
      <arg value="jif"/>
      <classpath>
        <pathelement location="${tmp}"/>
        <path refid="jif.classpath"/>
      </classpath>
    </java>
  </target>

  <!--
    Sets up keyword filters.
  -->
  <target name="keyword-filter"
      depends="configure-version,configure-dependency-versions">
    <tstamp>
      <format property="this-year" timezone="America/New_York" pattern="yyyy" />
    </tstamp>
    <filter token="YEAR" value="${this-year}"/>
    <filter token="VERSION" value="${fabric.version}"/>
    <filter token="POLYGLOT-VERSION" value="${polyglot.version}"/>
    <filter token="JIF-VERSION" value="${jif.version}"/>
  </target>

  <!--
  ____________________________________________________________________________
    Version-management helper targets.
  -->

  <!-- Generates version files in the source tree. -->
  <target name="gen-version">
    <antcall target="configure-buildstring" />
    <antcall target="gen-version-java" />
  </target>

  <!-- Puts version information into the Java sources. -->
  <target name="gen-version-java"
      depends="configure-buildstring">
    <antcall target="gen-version-java-compiler">
      <param name="name.code" value="fabil" />
      <param name="name.human" value="FabIL" />
    </antcall>
    <antcall target="gen-version-java-compiler">
      <param name="name.code" value="fabric" />
      <param name="name.human" value="Fabric" />
    </antcall>
    <antcall target="gen-version-java-system" />
  </target>

  <!--
    Puts version information into the Java sources for one of the compilers.

    Parameters:
      name.human - Human-readable version of the name of the extension.
      name.code - Source-code version of the name of the extension.
  -->
  <target name="gen-version-java-compiler">
    <echo file="${compiler.src}/${name.code}/Version.java">package ${name.code};

/**
 * Version information for ${name.human} extension.
 *
 * DO NOT EDIT THIS CLASS BY HAND!  This is automatically generated by Ant.  If
 * you wish to change the version number, run one of the following:
 *
 *   ant bump-version  (Bumps the version number.)
 *   ant bump-major    (Bumps the major version number.)
 *   ant bump-minor    (Bumps the minor version number.)
 *   ant bump-patch    (Bumps the patch level.)
 */
public class Version extends polyglot.main.Version {
  @Override
  public String name() {
    return "${name.code}";
  }

  @Override
  public int major() {
    return ${fabric.version.major};
  }

  @Override
  public int minor() {
    return ${fabric.version.minor};
  }

  @Override
  public int patch_level() {
    return ${fabric.version.patch};
  }

  @Override
  public String toString() {
    return "${fabric.version.build}";
  }
}
</echo>
  </target>

  <!--
    Puts version information into the Java sources for the Fabric system.
  -->
  <target name="gen-version-java-system">
    <echo file="${system.src}/fabric/common/Version.java">package fabric.common;

/**
 * This encapsulates the version of Fabric.
 *
 * DO NOT EDIT THIS CLASS BY HAND!  This is automatically generated by Ant.  If
 * you wish to change the version number, run one of the following:
 *
 *   ant bump-version  (Bumps the version number.)
 *   ant bump-major    (Bumps the major version number.)
 *   ant bump-minor    (Bumps the minor version number.)
 *   ant bump-patch    (Bumps the patch level.)
 *   ant mark-branch   (Changes the branch name.)
 */
public class Version {
  private int major = ${fabric.version.major};
  private int minor = ${fabric.version.minor};
  private int patch = ${fabric.version.patch};
  private String branch = "${fabric.version.branch}";

  public int major() { return major; }
  public int minor() { return minor; }
  public int patch() { return patch; }
  public String branch() { return branch; }

  @Override
  public String toString() {
    return "${fabric.version.build}";
  }
}
</echo>
  </target>

  <!--
  ****************************************************************************
    Javadoc target
  ****************************************************************************
  -->

  <target name="javadoc"
          depends="javadoc-compiler, javadoc-system"
          description="Runs javadoc over the Fabric source code" />

  <!-- Compiler classes -->
  <target name="javadoc-compiler">
    <javadoc sourcepath="${compiler.src}"
             destdir="${doc}/api/compiler"
             encoding="UTF-8"
             overview="${compiler.src}/overview.html">

      <packageset dir="${compiler.src}" defaultexcludes="yes" />

      <group title="Fabric Compiler" packages="fabric*" />

      <group title="Fabil Compiler" packages="fabil*" />

    </javadoc>
  </target>

  <!-- System classes -->
  <target name="javadoc-system">
    <javadoc sourcepath="${system.src}"
             overview="${system.src}/overview.html"
             destdir="${doc}/api/system"
             encoding="UTF-8">

      <packageset dir="${system.src}" defaultexcludes="yes" />

      <group title="Worker Implementation">
        <package name="fabric.worker*" />
        <package name="fabric.lang" />
        <package name="fabric.lang.security" />
      </group>

      <group title="Store Implementation"  packages="fabric.store*" />
      <group title="Dissemination Layer"   packages="fabric.dissemination*" />

    </javadoc>
  </target>

  <!--
  ****************************************************************************
    Documentation target
  ****************************************************************************
  -->

  <target name="manual" depends="check-for-doxygen,keyword-filter"
      description="Builds the Fabric manual">
    <!-- Delete old output. -->
    <delete dir="${manual.html}"/>
    <delete file="${manual.pdf}"/>
    <delete dir="${manual.tmp}"/>

    <!-- Copy sources to scratch directory while filtering. -->
    <copy todir="${manual.tmp}" filtering="yes" encoding="UTF-8">
      <fileset dir="${manual.src}" excludes="utf8.sty"/>
    </copy>
    <copy file="${manual.src}/utf8.sty" todir="${manual.tmp}"/>

    <!-- Generate HTML and LaTeX. -->
    <exec executable="${doxygen.executable}" failonerror="true"
        dir="${manual.tmp}" />

    <!-- Compile LaTeX. -->
    <copy file="${manual.tmp}/utf8.sty" todir="${manual.tmp}/latex"/>
    <copy file="${manual.tmp}/custom.sty" todir="${manual.tmp}/latex"/>
    <exec executable="make" failonerror="true" dir="${manual.tmp}/latex">
      <arg value="pdf"/>
    </exec>

    <!-- Move HTML and PDF into place. -->
    <move file="${manual.tmp}/html" tofile="${manual.html}"/>
    <move file="${manual.tmp}/latex/refman.pdf" tofile="${manual.pdf}"/>
  </target>

  <!--
  ____________________________________________________________________________
    Documentation helper targets.
  -->

  <target name="check-for-doxygen">
    <condition property="doxygen.executable" value="doxygen">
      <not>
        <isset property="doxygen.executable"/>
      </not>
    </condition>

    <property environment="env" />

    <fail message="Failed to find doxygen. Make sure to set the 'doxygen.executable' property in extra.properties.">
      <condition>
        <not>
          <or>
            <available
                file="${doxygen.executable}"
                property="doxygen.available"/>
            <available
                file="${doxygen.executable}"
                property="doxygen.available">
              <filepath>
                <pathelement path="${env.PATH}"/>
              </filepath>
            </available>
          </or>
        </not>
      </condition>
    </fail>
  </target>

  <!--
  ****************************************************************************
    Jar targets
  ****************************************************************************
  -->

  <!-- Main target for generating jars. -->
  <target name="jar-all" description="Builds all jars"
      depends="jar-base,jar-runtime,jar-sig,jar-tools,jar-libs" />

  <target name="jar-base" depends="fabil-compiler,fabric-system"
      description="Builds fabric.jar">
    <antcall target="make-jar">
      <param name="file" value="${jar.base}" />
      <param name="base" value="${classes}" />
    </antcall>
  </target>

  <target name="jar-runtime" depends="fabil-runtime,fabric-runtime"
      description="Builds fabric-rt.jar">
    <antcall target="make-jar">
      <param name="file" value="${jar.runtime}" />
      <param name="base" value="${runtime.classes}" />
    </antcall>
  </target>

  <target name="jar-sig" depends="fabil-signatures,fabric-signatures"
      description="Builds fabric-sig.jar and fabric-il-sig.jar">
    <antcall target="make-jar">
      <param name="file" value="${jar.signature.fabil}" />
      <param name="base" value="${signatures.fabil.classes}" />
    </antcall>

    <antcall target="make-jar">
      <param name="file" value="${jar.signature.fabric}" />
      <param name="base" value="${signatures.fabric.classes}" />
    </antcall>
  </target>

  <target name="jar-tools" depends="tools,mkdir-tmp"
      description="Builds Jar files for all the Fabric tools">
    <!-- Create the jar's directory structure in a temporary directory. --> 
    <copy todir="${tmp}">
      <fileset dir="${tools}">
        <!-- Store browser -->
        <include name="storebrowser/classes/**/*.class" />
      </fileset>
      <regexpmapper from="^[^/]*/classes/(.*)$$" to="\1" />
    </copy>

    <antcall target="make-jar">
      <param name="file" value="${jar.tools}" />
      <param name="base" value="${tmp}" />
    </antcall>

    <antcall target="rmdir-tmp" />
  </target>

  <target name="jar-libs"
      description="Builds Jar files for all the libraries that are built on top of Fabric">
    <subant target="jar">
      <fileset dir="${libs}" includes="build.xml" />
    </subant>
  </target>

  <!--
  ____________________________________________________________________________
    Jar helper targets.
  -->

  <!--
    Common target for creating jar files.

    Parameters:
      file - Destination jar file.
      base - base directory from which all class files will be included.
  -->
  <target name="make-jar" depends="jar-manifest">
    <jar jarfile="${file}" basedir="${base}" manifest="${tmp.manifest}"
        includes="**/*.class" />
  </target>

  <target name="jar-manifest" depends="configure-buildstring">
    <tempfile property="tmp.manifest" deleteonexit="true" />
    <manifest file="${tmp.manifest}">
      <attribute name="Built-By" value="${user.name}" />
      <attribute name="Implementation-Version" value="${fabric.version}" />
      <attribute name="Built-Date" value="${fabric.version.build}" />
    </manifest>
  </target>

  <!--
  ****************************************************************************
    Distribution targets.
  ****************************************************************************
  -->

  <!--
    Main target for generating the Fabric distribution.
    Creates the distribution tarball from Git.
  -->
  <target name="dist"
      description="Generates the distribution"
      depends="configure-buildstring,get-fabric-snapshot-info,build-jif">
    <!-- build-jif should have set up the tmp directory already. -->

    <!-- Check out Fabric from Git. -->
    <antcall target="git-clone">
      <param name="name" value="fabric" />
      <param name="root" value="${git.root.fabric}" />
      <param name="branch" value="${fabric.snapshot.branch}" />
      <param name="date" value="${fabric.snapshot.timestamp}" />
    </antcall>

    <!-- Configure the scratch copy. -->
    <concat destfile="${tmp}/fabric/config.properties" append="no">
      jif.home=${tmp}/fabric
      polyglot.home=${tmp}/fabric
      jdk.home=${jdk.home}
    </concat>

    <!-- Generate version information in the scratch copy. -->
    <antcall target="sub-ant-dist">
      <param name="sub-ant.dir" value="fabric" />
      <param name="sub-ant.target" value="gen-version" />
    </antcall>

    <!-- Copy jars into the scratch copy. -->
    <copy todir="${tmp}/fabric/lib">
      <fileset dir="${tmp}/jif/lib">
        <include name="jif.jar" />
        <include name="polyglot.jar" />
        <include name="ppg.jar" />
        <include name="pth.jar" />
        <include name="jflex.jar" />
        <include name="java_cup.jar" />
      </fileset>
    </copy>

    <!-- Attach copyright notices to source files in the scratch copy. -->
    <antcall target="sub-ant-dist">
      <param name="sub-ant.dir" value="fabric" />
      <param name="sub-ant.target" value="copyright-stamp" />
    </antcall>

    <!-- Create the distribution tarball in the scratch copy. -->
    <antcall target="sub-ant-dist">
      <param name="sub-ant.dir" value="fabric" />
      <param name="sub-ant.target" value="dist.tar" />
    </antcall>

    <!-- Move the distribution tarball out of the scratch directory. -->
    <move todir="${fabric.home}">
      <fileset dir="${tmp}/fabric">
        <include name="fabric-?*.?*.?*.tar.gz"/>
        <include name="fabric-?*.?*.?*-*.tar.gz"/>
      </fileset>
    </move>

    <!-- Clean up. -->
    <antcall target="rmdir-tmp" />

    <!-- Warn if we built against a snapshot of Jif. -->
    <antcall target="snapshot-warning" />
  </target>

  <!--
  ____________________________________________________________________________
    Distribution helper targets.
  -->

  <!--
    Prints a warning to not make the distribution public if it's built against
    a snapshot copy of Jif.
  -->
  <target name="snapshot-warning" if="${use-jif-rcs}">
    <echo message="***********"/>
    <echo message="  WARNING"/>
    <echo message="***********"/>
    <echo message="The distribution just built was made against a SNAPSHOT"/>
    <echo message="copy of Jif. It is therefore NOT recommended that this"/>
    <echo message="distribution be made public."/>
  </target>

  <!--
    Asks the user for Fabric-snapshot information.

    ${fabric.snapshot.branch} will specify the branch to use.
    ${fabric.snapshot.timestamp} will specify the time and date at which to
    snapshot.
  -->
  <target name="get-fabric-snapshot-info" depends="get-current-fabric-branch">
    <input message="Fabric branch to snapshot?"
        defaultvalue="${fabric.current.branch}"
        addproperty="fabric.snapshot.branch"/>
    <tstamp>
      <format property="default-snapshot" timezone="America/New_York"
          pattern="yyyy-MM-dd HH:mm:ss" />
    </tstamp>
    <input message="Time and date to snapshot?"
        defaultvalue="${default-snapshot}"
        addproperty="fabric.snapshot.timestamp"/>
  </target>

  <!--
    Determines the name of the current Fabric branch and puts it in
    ${fabric.current.branch}.
  -->
  <target name="get-current-fabric-branch">
    <exec executable="bash"
        dir="${fabric.home}"
        error="/dev/null"
        outputproperty="fabric.current.branch">
      <arg value="-c"/>
      <arg value="git rev-parse --abbrev-ref HEAD"/>
    </exec>
  </target>

  <!-- Stamps all source files with a copyright notice. -->
  <target name="copyright-stamp">
    <apply executable="bash"
        parallel="true"
        failonerror="true"
        dir="${fabric.home}"
        relative="false"
        skipemptyfilesets="true"
        vmlauncher="false">
      <arg value="${bin}/copyright-stamp" />
      <fileset dir="${fabric.home}">
        <include name="**/*.java" />
        <include name="**/*.fil" />
        <include name="**/*.fab" />

        <!-- Don't stamp third-party software. -->
        <exclude name="lib/**" />
      </fileset>
    </apply>
  </target>

  <!-- Creates a distribution tarball from the current working copy. -->
  <target name="dist.tar"
      depends="configure-version,build-all,jar-all,javadoc,manual,
        keyword-filter">
    <delete dir="${fabric.home}/fabric-${fabric.version}" />

    <!-- Process *.mkdn in top-level directory. -->
    <apply executable="${fabric.home}/tools/mkdn-stripper/bin/strip-mkdn"
        dir="${fabric.home}" dest="${fabric.home}">
      <srcfile/>
      <targetfile/>
      <fileset dir="${fabric.home}">
        <include name="README.mkdn"/>
        <include name="CHANGES.mkdn"/>
        <include name="CREDITS.mkdn"/>
      </fileset>
      <mapper type="glob" from="*.mkdn" to="*.in"/>
    </apply>

    <!-- Process *.in to insert current year and version. -->
    <copy todir="${fabric.home}" filtering="yes">
      <fileset dir="${fabric.home}">
        <include name="README.in"/>
        <include name="CHANGES.in"/>
        <include name="COPYING.in"/>
        <include name="CREDITS.in"/>
      </fileset>
      <mapper type="glob" from="*.in" to="*"/>
    </copy>

    <!-- Clean up a bit. -->
    <delete file="${fabric.home}/README.in"/>
    <delete file="${fabric.home}/CHANGES.in"/>
    <delete file="${fabric.home}/CREDITS.in"/>

    <!-- Create actual tarball. -->
    <tar destfile="${fabric.home}/fabric-${fabric.version}.tar.gz"
        compression="gzip"
        longfile="posix">
      <!-- Include top-level files. -->
      <tarfileset dir="${fabric.home}" prefix="fabric-${fabric.version}">
        <include name="version.properties" />
        <include name="build.xml" />
        <include name="common.xml" />
        <include name="config.properties.in" />
        <include name="eclipse/classpath.in" />
        <include name="CHANGES" />
        <include name="COPYING" />
        <include name="CREDITS" />
        <include name="README" />
      </tarfileset>

      <!-- Include scripts in bin and make them executable. -->
      <tarfileset dir="${bin}" prefix="fabric-${fabric.version}/bin"
          filemode="755">
        <include name="add-trusted-ca" />
        <include name="ca-sign" />
        <include name="codebase-tool" />
        <include name="dump-bdb" />
        <include name="fab" />
        <include name="fabc" />
        <include name="fabc-in-worker" />
        <include name="fab-store" />
        <include name="filc" />
        <include name="genkey" />
        <include name="import-cert" />
        <include name="make-ca" />
        <include name="make-node" />
        <include name="run-fab-class" />
        <include name="store-browser" />
        <include name="fab-http" />
      </tarfileset>

      <!-- Include bin/defs.in. -->
      <tarfileset dir="${bin}" prefix="fabric-${fabric.version}/bin">
        <include name="defs.in" />
      </tarfileset>

      <!-- Include certificate authority. -->
      <tarfileset dir="${etc}/ca" prefix="fabric-${fabric.version}/etc/ca">
        <include name="**" />
      </tarfileset>

      <!-- Include docs & manual. -->
      <tarfileset dir="${doc}" prefix="fabric-${fabric.version}/doc">
        <include name="api/**" />
        <include name="manual/manual.pdf" />
        <include name="manual/html/**" />
      </tarfileset>

      <!-- Include licences. -->
      <tarfileset dir="${doc}/licenses"
          prefix="fabric-${fabric.version}/doc/licenses">
        <include name="*" />
      </tarfileset>

      <!-- Include configuration files. -->
      <tarfileset dir="${etc}" prefix="fabric-${fabric.version}/etc">
        <include name="config/EXAMPLE.properties.in" />
        <include name="config.properties" />
        <include name="logging.properties" />
      </tarfileset>

      <!-- Include library dependencies. -->
      <tarfileset dir="${lib}" prefix="fabric-${fabric.version}/lib">
        <include name="README" />

        <!-- Compiled jars -->
        <include name="fabric.jar" />
        <include name="fabric-rt.jar" />
        <include name="fabric-il-sig.jar" />
        <include name="fabric-sig.jar" />
        <include name="fabric-tools.jar" />

        <!-- Compiled library jars -->
        <include name="fabric-sif.jar" />
        <include name="fabric-sif-sig.jar" />
        <include name="fabric-collections.jar" />

        <!-- Polyglot, PPG, and Jif -->
        <include name="polyglot.jar" />
        <include name="jif.jar" />
        <include name="ppg.jar" />

        <include name="src/README" />

        <!--
          ********************************************************************
          * The following are all third-party libraries!                     *
          *                                                                  *
          * If you add anything here, be sure to add a corresponding section *
          * to the COPYING file.                                             *
          ********************************************************************
        -->
        <!-- JFlex -->
        <include name="jflex.jar" />
        <!-- Java CUP -->
        <include name="java_cup.jar" />
        <!-- FreePastry -->
        <include name="FreePastry-*.jar" />
        <!-- JLine -->
        <include name="jline-*.jar" />
        <!-- BDB -->
        <include name="je-*.jar" />
        <include name="src/je-*.tar.gz" />
        <!-- BouncyCastle -->
        <include name="bcprov-*.jar" />
        <!-- Guava -->
        <include name="guava-*.jar" />
        <!-- Jetty -->
        <include name="jetty/jetty-*.jar" />
        <include name="jetty/jsp-*.jar" /> <!-- part of Jetty -->
        <!-- JDT Core -->
        <include name="jetty/core-*.jar" />
        <!-- Apache Commons -->
        <include name="jetty/commons-*.jar" />
        <!-- Apache Xalan -->
        <include name="xalan.jar" />
        <!-- Java Servlet API -->
        <include name="jetty/servlet-api-*.jar" />
      </tarfileset>

      <!-- Include compiler and system sources. -->
      <tarfileset dir="${src}" prefix="fabric-${fabric.version}/src">
        <include name="bootstrap/README" />
        <include name="bootstrap/**/*.java" />
        <include name="compiler/**/*.java" />
        <include name="compiler/**/package.html" />
        <include name="compiler/**/parse/*.flex" />
        <include name="compiler/**/parse/*.cup" />
        <include name="compiler/**/parse/*.ppg" />
        <include name="compiler/**/doc-files/**" />
        <include name="arrays/**/*.fil" />
        <include name="runtime/README" />
        <include name="runtime/**/*.fil" />
        <include name="runtime/**/*.fab" />
        <include name="signatures/fabil/**/*.fil" />
        <include name="signatures/fabric/**/*.fab" />
        <include name="system/**/*.java" />
        <!-- These will be handled below. -->
        <exclude name="runtime/fabric/util/**" />
      </tarfileset>

      <!-- Handle runtime/fabric/util specially to exclude unused classes. -->
      <tarfileset dir="${runtime.src}/fabric/util"
          prefix="fabric-${fabric.version}/src/runtime/fabric/util">
        <include name="**/*.fil" />
        <!-- Only include classes that were compiled. -->
        <present targetdir="${runtime.classes}/fabric/util">
          <globmapper from="*.fil" to="*.java" />
        </present>
      </tarfileset>

      <!-- Include tools. -->
      <tarfileset dir="${tools}" prefix="fabric-${fabric.version}/tools">
        <include name="build.xml" />
        <include name="storebrowser/**/README" />
        <include name="storebrowser/**/build.xml" />
        <include name="storebrowser/**/*.java" />
        <include name="classloader/**/README" />
        <include name="classloader/**/build.xml" />
        <include name="classloader/**/*.java" />
      </tarfileset>

      <!-- Include examples. -->
      <tarfileset dir="${examples}" prefix="fabric-${fabric.version}/examples">
        <include name="build.xml" />
        <include name="auction/README" />
        <include name="auction/build.xml" />
        <include name="auction/etc/**" />
        <include name="auction/src/**" />
        <include name="auth/**" />
        <include name="authwiki/**" />
        <include name="blog/**" />
        <include name="friendmap/README" />
        <include name="friendmap/build.xml" />
        <include name="friendmap/etc/**" />
        <include name="friendmap/src/**/*.fab" />
        <include name="friendmap/src/**/*.fil" />
        <include name="hello/**" />
        <include name="OO7/**" />
        <include name="sif-hello/**" />
        <include name="travel/README" />
        <include name="travel/build.xml" />
        <include name="travel/etc/**" />
        <include name="travel/src/**" />
        <include name="travel/web/**" />
        <!-- Exclude scripts.  These will be handled below. -->
        <exclude name="*/bin/*" />
      </tarfileset>

      <!-- Include scripts for examples. -->
      <tarfileset dir="${examples}" prefix="fabric-${fabric.version}/examples"
          filemode="755">
        <include name="auction/bin/**" />
        <include name="authwiki/bin/**" />
        <include name="blog/bin/**" />
        <include name="friendmap/bin/**" />
        <include name="hello/bin/**" />
        <include name="OO7/bin/**" />
        <include name="sif-hello/bin/**" />
        <include name="travel/bin/**" />
      </tarfileset>

      <!-- Include library sources. -->
      <tarfileset dir="${libs}" prefix="fabric-${fabric.version}/src/lib">
        <include name="README" />
        <include name="build.xml" />

        <!-- SIF -->
        <include name="sif/build.xml" />
        <include name="sif/common.xml" />
        <include name="sif/fab-src/**/*.fab" />
        <include name="sif/sig-src/**/*.fab" />
        <include name="sif/src/**/*.fil" />
        <include name="sif/src/**/*.java" />

        <!-- Collections -->
        <include name="collections/README" />
        <include name="collections/build.xml" />
        <include name="collections/common.xml" />
        <include name="collections/src/**/*.fab" />
      </tarfileset>
    </tar>

    <!-- Output a checklist for verifying that the distribution is good. -->
    <echo message="Dist package created. Verify the following:" />
    <echo message=" - Examples build and run" />
    <echo message=" - CHANGES file is up-to-date" />
    <echo message=" - CREDITS file is up-to-date, including funding support" />
    <echo message=" - Licensing information for 3rd-party software" />
    <echo message="   is up-to-date in COPYING" />
    <echo message=" - New features documented in manual" />
    <echo message=" - Version bump" />
    <echo />
    <echo message="When satisfied, you can integrate the distribution" />
    <echo message="package and manual into your working copy of the" />
    <echo message="website:" />
    <echo />
    <echo message="  bin/ship-dist fabric-${fabric.version}.tar.gz" />
  </target>

  <!--
    Ensures there is a built copy of Jif in the tmp directory.
  -->
  <target name="build-jif"
      depends="ask-jif-download-or-rcs,
          build-jif-rcs,
          download-jif,
          download-polyglot"/>

  <!--
    Asks the user for the version of Jif to build against.

    ${use-jif-rcs} will be a boolean indicating whether RCS should be used. If
    this is false, then ${jif.download.version} will be the version of Jif to
    be downloaded.
  -->
  <target name="get-jif-download-version"
      depends="ask-jif-download-or-rcs,configure-dependency-versions"
      unless="${use-jif-rcs}">
    <input message="Jif version to download?"
        defaultvalue="${jif.version}"
        addproperty="jif.download.version"/>
  </target>

  <!--
    Asks the user for the RCS snapshot information to use for Jif.

    ${jif.snapshot.branch} will specify the branch to use.
    ${jif.snapshot.timestamp} will specify the time and date at which to
    snapshot.
  -->
  <target name="get-jif-snapshot-info"
      depends="ask-jif-download-or-rcs"
      if="${use-jif-rcs}">
    <input message="Jif branch to snapshot?"
        defaultvalue="master"
        addproperty="jif.snapshot.branch"/>
    <input message="Polyglot branch to snapshot?"
        defaultvalue="master"
        addproperty="polyglot.snapshot.branch"/>
    <input message="Time and date to snapshot?"
        defaultvalue="${fabric.snapshot.timestamp}"
        addproperty="jif.snapshot.timestamp"/>
  </target>

  <!--
    Asks the user whether to download or snapshot Jif.

    ${use-jif-rcs} will be a boolean indicating whether RCS should be used.
  -->
  <target name="ask-jif-download-or-rcs">
    <echo message="*********************************************************"/>
    <echo message="Fabric is packaged with a copy of Jif. This can be either"/>
    <echo message="downloaded from the Jif website, or a development"/>
    <echo message="snapshot obtained directly from git."/>
    <echo/>
    <echo message="For public releases, (D)ownload is highly recommended."/>
    <echo message="*********************************************************"/>
    <input message="(D)ownload or (S)napshot?"
        validargs="d,s" defaultvalue="d"
        addproperty="input.jif-download-or-snapshot"/>

    <condition property="use-jif-rcs">
      <equals arg1="s" arg2="${input.jif-download-or-snapshot}"/>
    </condition>
  </target>

  <!--
    Downloads and extracts Jif in the tmp directory.
  -->
  <target name="download-jif" depends="mkdir-tmp,get-jif-download-version"
      unless="${use-jif-rcs}">
    <property name="jif.download.url"
        value="${jif.url.prefix}${jif.download.version}${jif.url.suffix}"/>
    <get src="${jif.download.url}" dest="${tmp}/jif.zip" verbose="on"/>
    <unzip src="${tmp}/jif.zip" dest="${tmp}"/>
    <move file="${tmp}/jif-${jif.download.version}" tofile="${tmp}/jif"/>

    <condition property="polyglot-needed" value="true">
      <not>
        <resourceexists>
          <file file="${tmp}/jif/lib/polyglot.jar"/>
        </resourceexists>
      </not>
    </condition>
  </target>

  <!--
    Asks the user for the version of Poylglot to build against. This is
    intended to run when Jif is downloaded, but was not packaged with Polyglot.

    ${polyglot.download.version} will be the version of Polyglot to be
    downloaded.
  -->
  <target name="get-polyglot-download-version"
      depends="configure-dependency-versions"
      unless="${use-jif-rcs}" if="${polyglot-needed}">
    <echo message="Jif was not packaged with Polyglot."/>
    <echo message="Downloading Polyglot separately."/>
    <input message="Polyglot version to download?"
        defaultvalue="${polyglot.version}"
        addproperty="polyglot.download.version"/>
  </target>

  <!--
    Downloads and extracts Polyglot in the tmp directory, then copies the
    Polyglot libraries into ${tmp}/jif/lib.

    This is intended to run when Jif is downloaded, but was not packaged with
    Polyglot.
  -->
  <target name="download-polyglot"
      depends="get-polyglot-download-version,download-jif"
      unless="${use-jif-rcs}" if="${polyglot-needed}">
    <property name="polyglot.download.url"
        value="${polyglot.url.prefix}${polyglot.download.version}${polyglot.url.suffix}"/>
    <get src="${polyglot.download.url}" dest="${tmp}/polyglot.zip"
        verbose="on"/>
    <unzip src="${tmp}/polyglot.zip" dest="${tmp}"/>
    <move file="${tmp}/polyglot-${polyglot.download.version}-src"
        tofile="${tmp}/polyglot"/>
    <copy todir="${tmp}/jif/lib">
      <fileset dir="${tmp}/polyglot/lib">
        <include name="polyglot.jar"/>
        <include name="ppg.jar" />
        <include name="pth.jar" />
        <include name="jflex.jar" />
        <include name="java_cup.jar" />
      </fileset>
    </copy>
  </target>

  <!--
    Checks out and builds Polyglot in the tmp directory.
  -->
  <target name="build-polyglot-rcs" depends="mkdir-tmp,get-jif-snapshot-info"
      if="${use-jif-rcs}">
    <!-- Check out Polyglot from Git. -->
    <antcall target="git-clone">
      <param name="name" value="polyglot" />
      <param name="root" value="${git.root.polyglot}" />
      <param name="branch" value="${polyglot.snapshot.branch}" />
      <param name="date" value="${jif.snapshot.timestamp}" />
    </antcall>

    <!-- Build Polyglot jars. -->
    <antcall target="sub-ant-dist">
      <param name="sub-ant.dir" value="polyglot" />
      <param name="sub-ant.target" value="jar-all" />
    </antcall>
  </target>

  <!--
    Checks out and builds Jif in the tmp directory.
  -->
  <target name="build-jif-rcs" depends="build-polyglot-rcs" if="${use-jif-rcs}">
    <!-- Check out Jif from Git. -->
    <antcall target="git-clone">
      <param name="name" value="jif" />
      <param name="root" value="${git.root.jif}" />
      <param name="branch" value="${jif.snapshot.branch}" />
      <param name="date" value="${jif.snapshot.timestamp}" />
    </antcall>

    <!-- Copy Polyglot tarballs. -->
    <copy todir="${tmp}/jif/lib">
      <fileset dir="${tmp}/polyglot/lib">
        <include name="jif.jar" />
        <include name="polyglot.jar" />
        <include name="ppg.jar" />
        <include name="pth.jar" />
        <include name="jflex.jar" />
        <include name="java_cup.jar" />
      </fileset>
    </copy>

    <!-- Configure Jif. -->
    <concat destfile="${tmp}/jif/config.properties" append="no">
      polyglot.home=${tmp}/jif
      jdk.home=${jdk.home}
    </concat>

    <!-- Build Jif jars. -->
    <antcall target="sub-ant-dist">
      <param name="sub-ant.dir" value="jif" />
      <param name="sub-ant.target" value="jar" />
    </antcall>
  </target>

  <!--
    Clones a fresh copy of a project from Git into ${tmp}.

    Parameters:
      root - the Git URL to check out
      name - the name of the destination in ${tmp}.
      branch - the branch to check out
      date - check out the most recent revision no later than the given date
  -->
  <target name="git-clone">
    <!-- First, clone. -->
    <exec executable="git" failonerror="true">
      <arg value="clone" />
      <arg value="-q" />
      <arg value="${root}" />
      <arg value="${tmp}/${name}" />
    </exec>

    <!-- Next, check out the requested branch. -->
    <exec executable="git" dir="${tmp}/${name}" failonerror="true">
      <arg value="checkout" />
      <arg value="${branch}" />
    </exec>

    <!-- Now, find the most recent hash occurring before the given date. -->
    <exec executable="git"
        dir="${tmp}/${name}"
        failonerror="true"
        outputproperty="git-hash">
      <arg value="rev-list" />
      <arg value="-n" /> <arg value="1" />
      <arg value="--before=${date}" />
      <arg value="${branch}" />
    </exec>

    <!-- Finally, check out that particular revision. -->
    <exec executable="git" dir="${tmp}/${name}" failonerror="true">
      <arg value="checkout" />
      <arg value="${git-hash}" />
    </exec>
  </target>

  <target name="mkdir-tmp" unless="tmp-is-made">
    <antcall target="rmdir-tmp" />
    <mkdir dir="${tmp}" />
    <property name="tmp-is-made" value="true"/>
  </target>

  <target name="rmdir-tmp">
    <delete dir="${tmp}" />
  </target>

  <!--
    Runs an Ant target in the ${tmp} scratch area.

    Parameters:
      sub-ant.dir - the subdirectory in ${tmp} in which to find the build.xml
                    file.
      sub-ant.target - the target to run.
  -->
  <target name="sub-ant-dist">
    <ant inheritAll="false"
         antfile="${tmp}/${sub-ant.dir}/build.xml"
         dir="${tmp}/${sub-ant.dir}"
         target="${sub-ant.target}" />
  </target>

  <!--
  ****************************************************************************
    Generic helper stuff for building Polyglot extensions.
  ****************************************************************************
  -->

  <target name="standard-ext">
    <antcall target="standard-ext-lexer" />
    <antcall target="standard-ext-${parser.type}-parser" />
    <antcall target="standard-ext-qq-dep" />
    <antcall target="compile-ext" />
  </target>

  <target name="standard-ext-lexer">
    <antcall target="jflex-lexer">
      <param name="lexer.dir" value="${compiler.src}/${ext.pkg}/parse" />
      <param name="lexer.class" value="Lexer_c" />
      <param name="jflex.file" value="${ext}.flex" />
    </antcall>
  </target>

  <target name="jflex-lexer" depends="jflex-lexer-deps"
      unless="jflex.lexer.up-to-date">
    <java classname="jflex.Main" fork="true" dir="${lexer.dir}"
        failonerror="true">
      <classpath refid="polyglot.classpath" />
            <arg line="--noinputstreamctor" />
      <arg value="${jflex.file}" />
    </java>
  </target>

  <target name="jflex-lexer-deps">
    <dependset>
      <srcfileset dir="${lexer.dir}" includes="${jflex.file}" />
      <targetfileset dir="${lexer.dir}" includes="${lexer.class}.java" />
    </dependset>
    <available property="jflex.lexer.up-to-date"
        file="${lexer.dir}/${lexer.class}.java" />
  </target>

  <target name="standard-ext-ppg-parser">
    <antcall target="ppg-parser">
      <param name="parser.dir" value="${compiler.src}/${ext.pkg}/parse" />
      <param name="ppg.file" value="${ext}.ppg" />
      <param name="cup.file" value="${ext}_ppg.cup" />
      <param name="parser.class" value="Grm" />
      <param name="symbol.class" value="sym" />
    </antcall>
  </target>

  <target name="ppg-parser" depends="ppg-parser-deps"
      unless="ppg.parser.up-to-date">
    <java classname="ppg.PPG" fork="true" dir="${parser.dir}"
        output="${parser.dir}/${cup.file}" failonerror="true" logError="true">
      <classpath refid="jif.classpath" />
      <arg value="${ppg.file}" />
    </java>
    <antcall target="cup-parser" />
    <replaceregexp
      file="${parser.dir}/${parser.class}.java"
      match="^(public )?class"
      replace="@SuppressWarnings(&quot;all&quot;) \1class"
      flags="g"
      byline="yes"
      />
  </target>

  <target name="ppg-parser-deps">
    <dependset>
      <srcfileset dir="${parser.dir}" includes="${ppg.file}" />
      <targetfileset dir="${parser.dir}">
        <include name="${cup.file}" />
        <include name="${parser.class}.java" />
        <include name="${symbol.class}.java" />
      </targetfileset>
    </dependset>
    <condition property="ppg.parser.up-to-date">
      <and>
        <available file="${parser.dir}/${cup.file}" />
        <available file="${parser.dir}/${parser.class}.java" />
        <available file="${parser.dir}/${symbol.class}.java" />
      </and>
    </condition>
  </target>

  <target name="cup-parser" depends="cup-parser-using-jar"
    unless="cup.parser.up-to-date">
  </target>

  <target name="cup-parser-using-jar" depends="cup-parser-deps"
      unless="cup.parser.up-to-date">
    <java classname="java_cup.Main" fork="true" dir="${parser.dir}" failonerror="true">
      <classpath refid="polyglot.classpath" />
      <arg value="-parser"/>
      <arg value="${parser.class}"/>
      <arg value="-symbols"/>
      <arg value="${symbol.class}"/>
      <arg value="${cup.file}"/>
    </java>
  </target>

  <target name="cup-parser-deps">
    <dependset>
      <srcfileset dir="${parser.dir}" includes="${cup.file}" />
      <targetfileset dir="${parser.dir}">
        <include name="${parser.class}.java" />
        <include name="${symbol.class}.java" />
      </targetfileset>
    </dependset>
    <condition property="cup.parser.up-to-date">
      <and>
        <available file="${parser.dir}/${parser.class}.java" />
        <available file="${parser.dir}/${symbol.class}.java" />
      </and>
    </condition>
  </target>

  <target name="standard-ext-qq-dep" if="has-qq">
    <antcall target="standard-ext-qq" />
  </target>

  <target name="standard-ext-qq">
    <antcall target="jflex-lexer">
      <param name="lexer.dir" value="${compiler.src}/${ext.pkg}/qq" />
      <param name="lexer.class" value="Lexer_c" />
      <param name="jflex.file" value="qq.flex" />
    </antcall>
    <antcall target="ppg-parser">
      <param name="parser.dir" value="${compiler.src}/${ext.pkg}/qq" />
      <param name="ppg.file" value="qq.ppg" />
      <param name="cup.file" value="qq_ppg.cup" />
      <param name="parser.class" value="Grm" />
      <param name="symbol.class" value="sym" />
    </antcall>
  </target>

  <target name="compile-ext" depends="init,bootstrap">
    <javac source="1.8" target="1.8" encoding="utf-8" srcdir="${compiler.src}"
        destdir="${classes}" debug="on" includeAntRuntime="false"
        includes="${ext.pkg}/**"
        excludes="**/package-info.java">
      <classpath>
        <path refid="jif.classpath" />
        <pathelement location="${bootstrap.classes}" />
        <pathelement location="${lib}/xalan.jar" />
      </classpath>
    </javac>
  </target>
</project>

<!--
vim: ts=2 sw=2 ai et
-->

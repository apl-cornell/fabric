package webapp.blog;

import fabric.util.Collection;
import fabric.util.Collections;
import fabric.util.HashSet;
import fabric.util.Set;

import webapp.PageStats;

public class Statistics {

  private transient static ThreadLocal/*Statistics*/ instance;
  private transient static Set/*String*/ clients;
  private transient static Set/*String*/ busyClients;
  private transient static boolean clientError;

  private Set/*Object*/ updates;
  private Set/*Object*/ reads;
  private PageStats currentPage;
  private long startTime;

  public static Statistics getInstance() {
    if (instance == null) {
      instance = new ThreadLocal/*Statistics*/();
      busyClients = new HashSet/*String*/().fabric$util$HashSet$();
      clients = new HashSet/*String*/().fabric$util$HashSet$();
      clientError = false;
    }
    Statistics s = (Statistics)instance.get();
    if (s == null) {
      s = new Statistics().webapp$blog$Statistics$();
      instance.set(s);
    }
    return s;
  }

  private Statistics webapp$blog$Statistics$() {
    fabric$lang$Object$();

    newPage(Diagnostics.getLocalStore(), Diagnostics.getCurrentLabel());

    return this;
  }

  public void newPage(Store s, Label l) {
    atomic {
      startTime = System.currentTimeMillis();
      updates = new HashSet@s/*Object*/().fabric$util$HashSet$();
      reads = new HashSet@s/*Object*/().fabric$util$HashSet$();
      currentPage = new PageStats@s().webapp$PageStats$();
    }
  }

  public void registerUpdate(Object t) {
    atomic {
      updates.add(t);
    }
  }

  public void registerCreate() {
    currentPage.numCreates++;
  }

  public void registerRead(Object t) {
    atomic {
      reads.add(t);
    }
  }

  public void addTransaction(long time) {
    currentPage.transactionTime = currentPage.transactionTime + (int)time;
    currentPage.numTransactions++;
  }

  public static void addClient(String clientHost) {
    clients.add(clientHost);
  }

  public static void removeClient(String clientHost) {
    clients.remove(clientHost);
  }

  public static Collection/*String*/ getClients() {
    return Collections.unmodifiableCollection(Diagnostics.getLocalStore(),
        clients);
  }

  public void doneApp() {
    currentPage.appTime = System.currentTimeMillis() - startTime;
  }

  public void done() {
    currentPage.numReads = reads.size();
    currentPage.numUpdates = updates.size();
    currentPage.pageLoadTime = System.currentTimeMillis() - startTime;
  }

  public PageStats getCurrentPageStats() {
    done();
    return currentPage;
  }

  public static void setClientDone(String client) {
    busyClients.remove(client);
  }

  public static void setBusyClient(String client) {
    busyClients.add(client);
  }

  public static Collection/*String*/ getBusyClients() {
    return Collections.unmodifiableCollection(Diagnostics.getLocalStore(),
        busyClients);
  }

  public static void removeAllBusyClients() {
    busyClients.clear();
  }

  public static void setClientError() {
    clientError = true;
    removeAllBusyClients();
  }

  public static void unsetClientError() {
    clientError = false;
  }

  public static boolean getClientError() {
    return clientError;
  }

  public Object $initLabels() {
    // update label: {_ <-}
    // access policy: {_ ->}
    this.$updateLabel = LabelUtil.noComponents();
    this.$accessPolicy = LabelUtil.bottomConf();

    return this;
  }
}

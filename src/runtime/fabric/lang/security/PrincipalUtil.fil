package fabric.lang.security;

import fabric.worker.Worker;
import fabric.worker.Store;
import fabric.worker.transaction.TransactionManager;
import fabric.lang.security.Principal;
import fabric.util.ArrayList;
import fabric.util.Collection;
import fabric.util.Map;
import fabric.util.Set;
import fabric.util.HashMap;
import fabric.util.Iterator;
import fabric.util.LinkedHashSet;
import java.util.HashSet;

/**
 * Utility methods for principals. This code is mostly copied from Jif.
 */
public class PrincipalUtil {

  /**
   * Returns true if and only if the principal p acts for the principal q. A
   * synonym for the <code>actsFor</code> method.
   */
  public static boolean acts_for(Principal p, Principal q) {
    return actsFor(p, q);
  }

  /**
   * Returns true if and only if the principal p acts for the principal q.
   */
  public static boolean actsFor(Principal p, Principal q) {
    final Store localStore = Worker.getWorker().getLocalStore();
    return actsForProof(localStore, p, q) != null;
  }

  /**
   * Returns an actsfor proof if and only if the principal p acts for the
   * principal q.
   */
  public static ActsForProof actsForProof(Store store, Principal p, Principal q) {
    final Store localStore = Worker.getWorker().getLocalStore();
    final SecurityCache cache =
      TransactionManager.getInstance().getSecurityCache();

    // try cache
    SecurityCache.ActsForPair pair = new SecurityCache.ActsForPair(p, q);
    if (cache.containsActsFor(pair)) {
      return cache.getActsFor(pair);
    }

    if (cache.containsNotActsFor(pair)) return null;

    if (delegatesTo(q, p)) return (DelegatesProof) new DelegatesProof@store().fabric$lang$security$DelegatesProof$(p, q);

    // if the two principals are ==-equal, or if they
    // both agree that they are equal to each other, then
    // we return true (since the acts-for relation is
    // reflexive).
    if (eq(p, q)) return (ReflexiveProof) new ReflexiveProof@store().fabric$lang$security$ReflexiveProof$(p, q);

    // try searching
    ActsForProof prf = findActsForProof(store, p, q, null);
    if (prf != null && (verifyProof(prf, p, q))) {
      cache.putActsFor(pair, prf);

      // add dependencies that this actsfor relies on.
      java.util.Set s = new HashSet();
      prf.gatherDelegationDependencies(s);

      // for each DelegationPair in s, if that delegation is removed, the
      // proof is no longer valid.
      for (java.util.Iterator iter = s.iterator(); iter.hasNext();) {
        SecurityCache.DelegationPair del =
          (SecurityCache.DelegationPair) iter.next();
        cache.addActsForDependency(del, pair);
      }

      return prf;
    }

    cache.addNotActsFor(pair);
    return null;
  }

  /**
   * Notification that a new delegation has been created.
   */
  public static void notifyNewDelegation(Principal granter, Principal superior) {
    // double check that the delegation occured
    if (!delegatesTo(granter, superior)) return;

    // XXX for the moment, just clear out all cached negative results
    TransactionManager.getInstance().getSecurityCache().clearNotActsFor();

    // need to notify the label cache too
    LabelUtil.notifyNewDelegation(granter, superior);
  }

  /**
   * Notification that an existing delegation has been revoked.
   */
  public static void notifyRevokeDelegation(Principal granter,
      Principal superior) {
    SecurityCache cache = TransactionManager.getInstance().getSecurityCache();
    SecurityCache.DelegationPair del =
      new SecurityCache.DelegationPair(superior, granter);
    cache.notifyRevokedDelegation(del);
  }

  /**
   * Search for an ActsForProof between p and q. An ActsForProof between p and q
   * is a a checkable proof object.
   *
   * @param p
   * @param q
   * @param searchState
   *          records the goals that we are in the middle of attempting
   * @return An ActsForPoorf between p and q, or null if none can be found.
   */
  public static ActsForProof findActsForProof(Store store, Principal p, Principal q,
      java.lang.Object searchState) {
    final Store localStore = Worker.getWorker().getLocalStore();
//    try {
//      LabelUtil.enterTiming();
      // try the dumb things first.
      if (q == null) {
        return (DelegatesProof) new DelegatesProof@store().fabric$lang$security$DelegatesProof$(p, q);
      }
      if (eq(p, q)) {
        return (ReflexiveProof) new ReflexiveProof@store().fabric$lang$security$ReflexiveProof$(p, q);
      }

      // check the search state
      ProofSearchState newss;
      if (searchState instanceof ProofSearchState) {
        ProofSearchState ss = (ProofSearchState)searchState;
        if (ss.contains(p, q)) {
          // p and q are already on the goal stack. Prevent an infinite recursion.
          return null;
        }
        newss = (ProofSearchState) new ProofSearchState@localStore().fabric$lang$security$PrincipalUtil$ProofSearchState$(ss, p, q);
      } else {
        newss = (ProofSearchState) new ProofSearchState@localStore().fabric$lang$security$PrincipalUtil$ProofSearchState$(p, q);
      }

      // if we're going from a dis/conjunctive principal, try finding a
      // downwards
      // proof first
      ActsForProof prf;
      boolean doneDownTo = false;
      if (p instanceof ConjunctivePrincipal
          || p instanceof DisjunctivePrincipal) {
        prf = p.findProofDownto(store, q, newss);
        if (prf != null) return prf;
        doneDownTo = true;
      }

      // try searching upwards from q.
      prf = q.findProofUpto(store, p, newss);
      if (prf != null) return prf;

      // try searching downards from p.
      if (!doneDownTo && p != null) {
        prf = p.findProofDownto(store, q, newss);
        if (prf != null) return prf;
      }

      // have failed!
      return null;
//    } finally {
//      LabelUtil.exitTiming();
//    }

  }

  private static class ProofSearchState {
    // XXX Tom 6/18/18: Marking this as transient because, AFAICT, this type is
    // purely intended for in-transaction bookkeeping and will neither be
    // persisted or shared between nodes.
    private transient SecurityCache.ActsForPair native[] goalstack;

    public ProofSearchState fabric$lang$security$PrincipalUtil$ProofSearchState$(Principal p, Principal q) {
      goalstack = new SecurityCache.ActsForPair native[1];
      goalstack[0] = new SecurityCache.ActsForPair(p, q);
      return this;
    }

    private ProofSearchState fabric$lang$security$PrincipalUtil$ProofSearchState$(ProofSearchState ss, Principal p, Principal q) {
      int len = ss.goalstack.length + 1;
      goalstack = new SecurityCache.ActsForPair native[len];
      for (int i = 0; i < len - 1; i++)
        goalstack[i] = ss.goalstack[i];
      goalstack[len - 1] = new SecurityCache.ActsForPair(p, q);
      return this;
    }

    public boolean contains(Principal p, Principal q) {
      for (int i = 0; i < goalstack.length; i++) {
        if (goalstack[i] != null) {
          if (eq(goalstack[i].p, p) && eq(goalstack[i].q, q)) {
            return true;
          }
        }
      }
      return false;
    }

    public Object $initLabels() {
      // XXX What should this be?  Using completely permissive values for now.
      // update label: {_ <-}
      // access policy: {_ ->}
      this.$updateLabel = LabelUtil.noComponents();
      this.$accessPolicy = LabelUtil.bottomConf();

        return this;
    }
  }

  /**
   * Return whether principals p and q are equal. p and q must either be
   * references to the same object, both be null, or agree that they are equal
   * to the other.
   */
  private static boolean eq(Principal p, Principal q) {
    return p == q || (p != null && q != null && p.equals(q) && q.equals(p));
  }

  /**
   * Verify that the chain is a valid delegates-chain between p and q. That is,
   * q == chain[n], chain[n] delegates to chain[n-1], ..., chain[0] == p, i.e.,
   * p acts for q.
   */
  public static boolean verifyProof(ActsForProof prf, Principal actor,
      Principal granter) {
    // try {
    // LabelUtil.enterTiming();
    if (prf == null) return false;
    if (prf.getActor() != actor || prf.getGranter() != granter) return false;

    if (prf instanceof DelegatesProof) {
      return delegatesTo(granter, actor);
    } else if (prf instanceof ReflexiveProof) {
      return eq(actor, granter);
    } else if (prf instanceof TransitiveProof) {
      TransitiveProof proof = (TransitiveProof) prf;
      return verifyProof(proof.getActorToP(), proof.getActor(), proof.getP())
          && verifyProof(proof.getPToGranter(), proof.getP(), proof
              .getGranter());
    } else if (prf instanceof FromDisjunctProof) {
      FromDisjunctProof proof = (FromDisjunctProof) prf;
      if (actor instanceof DisjunctivePrincipal) {
        DisjunctivePrincipal dp = (DisjunctivePrincipal) actor;
        // go though each disjunct, and make sure there is a proof
        // from the disjunct to the granter
        for (Iterator iter = dp.disjuncts.iterator(); iter.hasNext();) {
          Principal disjunct = (Principal) iter.next();
          ActsForProof pr =
              (ActsForProof) proof.getDisjunctProofs().get(disjunct);
          if (!verifyProof(pr, disjunct, granter)) return false;
        }
        // we have verified a proof from each disjunct to the granter
        return true;
      }

    } else if (prf instanceof ToConjunctProof) {
      ToConjunctProof proof = (ToConjunctProof) prf;
      if (granter instanceof ConjunctivePrincipal) {
        ConjunctivePrincipal cp = (ConjunctivePrincipal) granter;
        // go though each conjunct, and make sure there is a proof
        // from actor to the conjunct
        for (Iterator iter = cp.conjuncts.iterator(); iter.hasNext();) {
          Principal conjunct = (Principal) iter.next();
          ActsForProof pr =
              (ActsForProof) proof.getConjunctProofs().get(conjunct);
          if (!verifyProof(pr, actor, conjunct)) return false;
        }
        // we have verified a proof from actor to each conjunct.
        return true;
      }

    }

    // unknown proof!
    return false;
    // } finally {
    // LabelUtil.exitTiming();
    // }

  }

  public static boolean delegatesTo(Principal granter, Principal superior) {
    // try {
    // LabelUtil.enterTiming();
    if (granter == null) return true;
    if (isTopPrincipal(superior)) return true;
    if (superior instanceof ConjunctivePrincipal) {
      ConjunctivePrincipal cp = (ConjunctivePrincipal) superior;
      for (Iterator iter = cp.conjuncts.iterator(); iter.hasNext();) {
        Principal conjunct = (Principal) iter.next();
        if (equals(conjunct, granter)) return true;
      }
    }
    return granter.delegatesTo(superior);
    // } finally {
    // LabelUtil.exitTiming();
    // }

  }

  public static boolean equivalentTo(Principal p, Principal q) {
//    try {
//      LabelUtil.enterTiming();
      boolean eq = false;
      atomic {
          eq = actsFor(p, q) && actsFor(q, p);
      }
      return eq;
//    } finally {
//      LabelUtil.exitTiming();
//    }
  }

  public static boolean equals(Principal p, Principal q) {
    // try {
    // LabelUtil.enterTiming();
    return eq(p, q);
    // } finally {
    // LabelUtil.exitTiming();
    // }

  }

  /**
   * Execute the given closure, if the principal agrees.
   */
  public static java.lang.Object execute(Principal p, java.lang.Object authPrf,
      Closure c, Label lb) {
    final Store localStore = Worker.getWorker().getLocalStore();
    Capability cap = authorize(localStore, p, authPrf, c, lb, true);
    if (cap != null) {
      return cap.invoke();
    }
    return null;
  }

  /**
   * Obtain a Capability for the given principal and closure.
   */
  public static Capability authorize(Store store, Principal p,
      java.lang.Object authPrf, Closure c, Label lb) {
    return authorize(store, p, authPrf, c, lb, false);
  }

  public static Capability authorize(Principal p, java.lang.Object authPrf,
      Closure c, Label lb) {
    final Store localStore = Worker.getWorker().getLocalStore();
    return authorize(localStore, p, authPrf, c, lb, false);
  }

  private static Capability authorize(Store store, Principal p, java.lang.Object authPrf,
      Closure c, Label lb, boolean executeNow) {
//    try {
//      LabelUtil.enterTiming();
      Principal closureP = c.jif$getfabric_lang_security_Closure_P();
      Label closureL = c.jif$getfabric_lang_security_Closure_L();
      if (closureP == p
          || (p != null && closureP != null && p.equals(closureP) && closureP
              .equals(p))) {
        // The principals agree.
        if (LabelUtil.equivalentTo(closureL, lb)) {
          // the labels agree
          if (p == null || p.isAuthorized(authPrf, c, lb, executeNow)) {
            // either p is null (and the "null" principal always
            // gives authority!) or p grants authority to execute the
            // closure.
            return (Capability) new Capability@store().fabric$lang$security$Capability$(closureP, closureL, c);
          }
        }
      }
      return null;
//    } finally {
//      LabelUtil.exitTiming();
//    }

  }

  /**
   * returns the null principal, the principal that every other principal can
   * act for.
   */
  public static Principal nullPrincipal() {
    return null;
  }

  public static Principal bottomPrincipal() {
    // try {
    // LabelUtil.enterTiming();
    return nullPrincipal();
    // } finally {
    // LabelUtil.exitTiming();
    // }

  }

  public static Principal topPrincipal() {
    final LocalStore localStore = Worker.getWorker().getLocalStore();
    return localStore.getTopPrincipal();
  }

  static boolean isTopPrincipal(Principal p) {
    return p instanceof TopPrincipal;
  }

  public static ConfPolicy readableByPrinPolicy(Store store, Principal p) {
//    try {
//      LabelUtil.enterTiming();
      return (ReaderPolicy) new ReaderPolicy@store().fabric$lang$security$ReaderPolicy$(topPrincipal(), p);
//    } finally {
//      LabelUtil.exitTiming();
//    }

  }

  public static IntegPolicy writableByPrinPolicy(Store store, Principal p) {
//    try {
//      LabelUtil.enterTiming();
      return (WriterPolicy) new WriterPolicy@store().fabric$lang$security$WriterPolicy$(topPrincipal(), p);
//    } finally {
//      LabelUtil.exitTiming();
//    }
  }

  public static Principal disjunction(Store store, Principal left, Principal right) {
//    try {
//      LabelUtil.enterTiming();
      if (left == null || right == null) return null;
      if (actsFor(left, right)) return right;
      if (actsFor(right, left)) return left;
      Collection/* <Principal> */c = (ArrayList) new ArrayList/* <Principal> */@store().fabric$util$ArrayList$(2);
      c.add(left);
      c.add(right);
      return disjunction(store, c);
//    } finally {
//      LabelUtil.exitTiming();
//    }

  }

  public static Principal conjunction(Store store, Principal left, Principal right) {
//    try {
//      LabelUtil.enterTiming();
      if (left == null) return right;
      if (right == null) return left;
      if (actsFor(left, right)) return left;
      if (actsFor(right, left)) return right;
      Collection/* <Principal> */c = (ArrayList) new ArrayList/* <Principal> */@store().fabric$util$ArrayList$(2);
      c.add(left);
      c.add(right);
      return conjunction(store, c);
//    } finally {
//      LabelUtil.exitTiming();
//    }

  }

  public static Principal disjunction(Store store, Collection/* <Principal> */principals) {
//    try {
//      LabelUtil.enterTiming();
      if (principals == null || principals.isEmpty()) {
        return topPrincipal();
      }
      final Store localStore = Worker.getWorker().getLocalStore();
      if (principals.size() == 1) {
        Object o = principals.iterator(localStore).next();
        if (o == null || o instanceof Principal) return (Principal) o;
        return topPrincipal();
      }

      // go through the collection of principals, and flatten them
      Set/* <Principal> */needed = (LinkedHashSet) new LinkedHashSet/* <Principal> */@store().fabric$util$LinkedHashSet$();
      for (Iterator/* <Principal> */iter = principals.iterator(localStore); iter
      .hasNext();) {
        Object o = iter.next();
        Principal p = null;
        if (o instanceof Principal) p = (Principal) o;
        if (p == null) return p;
        if (PrincipalUtil.isTopPrincipal(p)) continue;
        if (p instanceof DisjunctivePrincipal) {
          needed.addAll(((DisjunctivePrincipal) p).disjuncts);
        } else {
          needed.add(p);
        }
      }
      return (DisjunctivePrincipal) new DisjunctivePrincipal@store().fabric$lang$security$DisjunctivePrincipal$(needed);
//    } finally {
//      LabelUtil.exitTiming();
//    }

  }

  public static Principal conjunction(Store store, Collection/* <Principal> */principals) {
//    try {
//      LabelUtil.enterTiming();
      if (principals == null || principals.isEmpty()) {
        return bottomPrincipal();
      }
      final Store localStore = Worker.getWorker().getLocalStore();
      if (principals.size() == 1) {
        Object o = principals.iterator(localStore).next();
        if (o == null || o instanceof Principal) return (Principal) o;
        return bottomPrincipal();
      }

      // go through the collection of principals, and flatten them
      Set/* <Principal> */needed = (LinkedHashSet) new LinkedHashSet/* <Principal> */@store().fabric$util$LinkedHashSet$();
      for (Iterator/* <Principal> */iter = principals.iterator(localStore); iter
      .hasNext();) {
        Object o = iter.next();
        Principal p = null;
        if (o instanceof Principal) p = (Principal) o;

        if (p == null) continue; // ignore bottom principals
        if (PrincipalUtil.isTopPrincipal(p)) return p;
        if (p instanceof ConjunctivePrincipal) {
          needed.addAll(((ConjunctivePrincipal) p).conjuncts);
        } else {
          needed.add(p);
        }
      }
      return (ConjunctivePrincipal) new ConjunctivePrincipal@store().fabric$lang$security$ConjunctivePrincipal$(needed);
//    } finally {
//      LabelUtil.exitTiming();
//    }

  }

  public static String toString(Principal p) {
    // try {
    // LabelUtil.enterTiming();
    return p == null ? "_" : p.name();
    // } finally {
    // LabelUtil.exitTiming();
    // }

  }

  public static String stringValue(Principal p) {
    // try {
    // LabelUtil.enterTiming();
    return toString(p);
    // } finally {
    // LabelUtil.exitTiming();
    // }

  }

  public static final class TopPrincipal extends Principal {
    public TopPrincipal fabric$lang$security$PrincipalUtil$TopPrincipal$() {
      fabric$lang$security$Principal$();
      return this;
    }

    public String name() {
      return "*";
    }

    public boolean delegatesTo(Principal p) {
      return false;
    }

    public boolean equals(Principal p) {
      return p instanceof TopPrincipal;
      // XXX No proper support for static state yet.
      // return p == this;
    }

    public boolean isAuthorized(java.lang.Object authPrf, Closure closure,
        Label lb, boolean executeNow) {
      return false;
    }

    public ActsForProof findProofUpto(Store store, Principal p,
        java.lang.Object searchState) {
      return null;
    }

    public ActsForProof findProofDownto(Store store, Principal q,
        java.lang.Object searchState) {
      return null;
    }

    public Object $initLabels() {
      // XXX What should this be?  Using completely permissive values for now.
      // update label: {_ <-}
      // access policy: {_ ->}
      this.$updateLabel = LabelUtil.noComponents();
      this.$accessPolicy = LabelUtil.bottomConf();

        return this;
    }
  }

  public Object $initLabels() {
    // XXX What should this be?  Using completely permissive values for now.
    // update label: {_ <-}
    // access policy: {_ ->}
    this.$updateLabel = LabelUtil.noComponents();
    this.$accessPolicy = LabelUtil.bottomConf();

      return this;
  }
}

/*
 * * vim: ts=2 sw=4 et cindent cino=\:0
 */

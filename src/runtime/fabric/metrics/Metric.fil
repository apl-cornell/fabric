package fabric.metrics;

import fabric.util.ArrayList;
import fabric.util.HashMap;
import fabric.util.List;
import fabric.util.Set;

import fabric.metrics.util.AbstractSubject;
import fabric.metrics.util.Observer;

import fabric.worker.Store;
import fabric.worker.Worker;
import fabric.worker.remote.RemoteWorker;
import fabric.worker.transaction.TransactionManager;
import fabric.worker.metrics.StatsMap;
import fabric.worker.metrics.RunningMetricStats;
import fabric.worker.metrics.treaties.MetricTreaty;
import fabric.worker.metrics.treaties.TreatySet;
import fabric.worker.metrics.treaties.enforcement.DirectPolicy;
import fabric.worker.metrics.treaties.enforcement.EnforcementPolicy;
import fabric.worker.metrics.treaties.statements.EqualityStatement;
import fabric.worker.metrics.treaties.statements.ThresholdStatement;
import fabric.lang.security.LabelUtil;

import java.util.logging.Level;
import fabric.common.Logging;
import fabric.common.util.Pair;

/**
 * Abstract class with base implementation of some {@link Metric} methods.
 */
public abstract class Metric extends AbstractSubject
        implements Comparable/*<Metric>*/ {

  ////////////////////////////////////////////////////////////////////////////
  // External (user-facing) API
  ////////////////////////////////////////////////////////////////////////////

  /** @return the current value of the {@link Metric}. */
  public double value() {
    return value(StatsMap.emptyStats());
  }

  /**
   * @param scalar
   *            a double scalar to scale this metric by
   * @return A {@link Metric} that tracks the scaled value of this
   *         {@link Metric}.
   */
  public DerivedMetric times(double scalar) {
    return static_times(this, scalar);
  }

  private static DerivedMetric static_times(Metric tmp, double scalar) {
    final Store s = tmp.$getStore();
    DerivedMetric val = null;
    if (TransactionManager.getInstance().inTxn()) {
      val = new ScaledMetric@s().fabric$metrics$ScaledMetric$(scalar, tmp);
    } else {
      atomic {
        val = new ScaledMetric@s().fabric$metrics$ScaledMetric$(scalar, tmp);
      }
    }
    return val;
  }

  /**
   * @param other
   *            another {@link Metric} to add with this {@link Metric}.
   * @return a {@link Metric} that tracks the value of the sum of other and
   *         this.
   */
  public DerivedMetric plus(Metric other) {
    return static_plus(this, other);
  }

  public static DerivedMetric static_plus(Metric tmp, Metric other) {
    // Ugh dumb hack
    if (other instanceof SumMetric)
      return other.plus(tmp);
    final Store s = tmp.$getStore();
    DerivedMetric val = null;
    if (TransactionManager.getInstance().inTxn()) {
      val = new SumMetric@s().fabric$metrics$SumMetric$(new Metric native[] { tmp, other });
    } else {
      atomic {
        val = new SumMetric@s().fabric$metrics$SumMetric$(new Metric native[] { tmp, other });
      }
    }
    return val;
  }

  /**
   * @param other
   *            another {@link Metric} to take the minimum of along with this
   *            {@link Metric}.
   * @return a {@link Metric} that tracks the value of the minimum of this and
   *         the other {@link Metric}.
   */
  public Metric min(Metric other) {
    return static_min(this, other);
  }

  private static Metric static_min(Metric tmp, Metric other) {
    // Ugh dumb hack
    if (tmp.equals(other))
      return tmp;
    if (other instanceof MinMetric)
      return other.min(tmp);
    final Store s = tmp.$getStore();
    DerivedMetric val = null;
    if (tmp.compareTo(other) > 0) {
      if (TransactionManager.getInstance().inTxn()) {
        val = new MinMetric@s().fabric$metrics$MinMetric$(new Metric native[] { other, tmp });
      } else {
        atomic {
          val = new MinMetric@s().fabric$metrics$MinMetric$(new Metric native[] { other, tmp });
        }
      }
    } else {
      if (TransactionManager.getInstance().inTxn()) {
        val = new MinMetric@s().fabric$metrics$MinMetric$(new Metric native[] { tmp, other });
      } else {
        atomic {
          val = new MinMetric@s().fabric$metrics$MinMetric$(new Metric native[] { tmp, other });
        }
      }
    }
    return val;
  }

  /**
   * @param other
   *            another {@link Metric} to take the maximum of along with this
   *            {@link Metric}.
   * @return a {@link Metric} that tracks the value of the maximum of this and
   *         the other {@link Metric}.
   */
  public Metric max(Metric other) {
    // TODO: This is not the best approach to this.
    return (this.times(-1).min(other.times(-1))).times(-1);
  }

  /**
   * @param rate
   *            the rate parameter for the bound on the resulting
   *            {@link MetricTreaty}
   * @param base
   *            the base parameter for the bound on the resulting
   *            {@link MetricTreaty}
   * @param time
   *            the startTime parameter of the bound on the resulting
   *            {@link MetricTreaty}
   * @return a {@link MetricTreaty} which enforces that the {@link Metric}
   *         satisfies a bound with the given parameters at the given time. If
   *         such a {@link MetricTreaty} already exists, it is returned,
   *         otherwise a new one is created and returned (unactivated).
   */
  public MetricTreaty getEqualityTreaty(double value) {
    return static_getEqualityTreaty(this, value);
  }

  private static MetricTreaty static_getEqualityTreaty(Metric tmp, double value) {
    MetricTreaty mc = null;
    if (TransactionManager.getInstance().inTxn()) {
      mc = tmp.createEqualityTreaty(value);
    } else {
      atomic {
        mc = tmp.createEqualityTreaty(value);
      }
    }
    return mc;
  }

  /**
   * @param rate
   *            the rate parameter for the bound on the resulting
   *            {@link MetricTreaty}
   * @param base
   *            the base parameter for the bound on the resulting
   *            {@link MetricTreaty}
   * @param time
   *            the startTime parameter of the bound on the resulting
   *            {@link MetricTreaty}
   * @return a {@link MetricTreaty} which enforces that the {@link Metric}
   *         satisfies a bound with the given parameters at the given
   *         time. If such a {@link MetricTreaty} already exists, it is
   *         returned, otherwise a new one is created and returned
   *         (unactivated).
   *
   */
  public MetricTreaty getThresholdTreaty(double rate, double base, long time) {
    return static_getThresholdTreaty(this, rate, base, time);
  }

  private static MetricTreaty static_getThresholdTreaty(Metric tmp, double rate, double base, long time) {
    MetricTreaty mc = null;
    if (TransactionManager.getInstance().inTxn()) {
      mc = tmp.createThresholdTreaty(rate, base, time);
    } else {
      atomic {
        mc = tmp.createThresholdTreaty(rate, base, time);
      }
    }
    return mc;
  }

  /**
   * @param rate
   *            the rate parameter for the bound on the resulting
   *            {@link MetricTreaty}
   * @param base
   *            the base parameter for the bound on the resulting
   *            {@link MetricTreaty}
   * @return a {@link MetricTreaty} which enforces that the {@link Metric}
   *         satisfies a bound with the given parameters at the
   *         current time. If such a {@link MetricTreaty} already exists, it
   *         is returned, otherwise a new one is created and returned
   *         (unactivated).
   */
  protected MetricTreaty getThresholdTreaty(double rate, double base) {
    return getThresholdTreaty(rate, base, 0);
  }

  /**
   * Create a locally tracked {@link DerivedMetric} that takes a scaled value
   * of another {@link Metric}.
   *
   * @param s
   *            the {@link Store} the returned {@link DerivedMetric} will be
   *            stored at
   * @param a
   *        the scaling factor
   * @param term
   *        the {@link Metric}
   * @return the locally tracked {@link DerivedMetric} for the scaled value of
   *       the given {@link Metric}.
   */
  public static Metric scaleAtStore(final Store s, double a, Metric term) {
    if (term.$getStore().equals(s))
      return term.times(a);
    DerivedMetric val = null;
    if (TransactionManager.getInstance().inTxn()) {
      val = new ScaledMetric@s().fabric$metrics$ScaledMetric$(a, term);
    } else {
      atomic {
        val = new ScaledMetric@s().fabric$metrics$ScaledMetric$(a, term);
      }
    }
    return val;
  }

  /**
   * Create a locally tracked {@link DerivedMetric} that takes the sum of
   * other {@link Metric}s.
   *
   * @param s
   *            the {@link Store} the returned {@link DerivedMetric} will be
   *            stored at
   * @param terms
   *            the {@link Metric}s to sum
   * @return the locally tracked {@link DerivedMetric} for the sum of the
   *       terms.
   */
  public static Metric addAtStore(final Store s, Metric native[] terms) {
    if (terms.length == 0)
      throw new IllegalArgumentException("Must have at least 1 term!");
    if (terms.length == 1)
      return scaleAtStore(s, 1.0, terms[0]);
    DerivedMetric val = null;
    if (TransactionManager.getInstance().inTxn()) {
      val = new SumMetric@s().fabric$metrics$SumMetric$(terms);
    } else {
      atomic {
        val = new SumMetric@s().fabric$metrics$SumMetric$(terms);
      }
    }
    return val;
  }

  /**
   * Create a locally tracked {@link DerivedMetric} that takes the minimum of
   * other {@link Metric}s.
   *
   * @param s
   *            the {@link Store} the returned {@link Metric} will be stored
   *            at
   * @param terms
   *        the {@link Metric}s to take the min of
   * @return the locally tracked {@link Metric} for the minimum of the terms.
   */
  public static Metric minAtStore(final Store s, Metric native[] terms) {
    if (terms.length == 0)
      throw new IllegalArgumentException("Must have at least 1 term!");
    if (terms.length == 1)
      return scaleAtStore(s, 1.0, terms[0]);
    DerivedMetric val = null;
    if (TransactionManager.getInstance().inTxn()) {
      val = new MinMetric@s().fabric$metrics$MinMetric$(terms);
    } else {
      atomic {
        val = new MinMetric@s().fabric$metrics$MinMetric$(terms);
      }
    }
    return val;
  }

  /**
   * Create a locally tracked {@link DerivedMetric} that takes the maximum of
   * other {@link Metric}s.
   *
   * @param s
   *            the {@link Store} the returned {@link Metric} will be stored
   *            at
   * @param terms
   *        the {@link Metric}s to take the max of
   * @return the locally tracked {@link Metric} for the maximum of the terms.
   */
  public static Metric maxAtStore(final Store s, Metric native[] terms) {
    if (terms.length == 0)
      throw new IllegalArgumentException("Must have at least 1 term!");
    if (terms.length == 1)
      return scaleAtStore(s, 1.0, terms[0]);
    for (int i = 0; i < terms.length; i++) {
      terms[i] = terms[i].times(-1);
    }
    return minAtStore(s, terms).times(-1);
  }

  ////////////////////////////////////////////////////////////////////////////
  // Internal API
  ////////////////////////////////////////////////////////////////////////////

  /**
   * Cache of DerivedMetrics using this Metric as a term (helps to break up
   * interning cache to avoid one big map.
   */
  //private final HashMap[><DerivedMetric, DerivedMetric><] transformations;

  // Stuff to allow for preset strategies.
  public abstract boolean getUsePreset();
  public abstract double getPresetR();
  public abstract double getPresetB();
  public abstract double getPresetV();
  public abstract double getPresetN();

  /**
   * @param store
   *            the Store that holds this {@link Metric}
   */
  protected Metric fabric$metrics$Metric$() {
    fabric$metrics$util$AbstractSubject$();
    return this;
  }

  /**
   * @param weakStats
   *            StatsMap for mapping metrics to weakly consistent values to use
   *            for metric stats.
   * @return the current value of the {@link Metric}.
   */
  public abstract double value(StatsMap weakStats);

  /** @return the number of samples of the {@link Metric}. */
  public long samples() {
    return samples(StatsMap.emptyStats());
  }

  /**
   * @param weakStats
   *            StatsMap for mapping metrics to weakly consistent values to use
   *            for metric stats.
   * @return the number of samples of the {@link Metric}.
   */
  public abstract long samples(StatsMap weakStats);

  /** @return the time of the last update of the {@link Metric}. */
  public long lastUpdate() {
    return lastUpdate(StatsMap.emptyStats());
  }

  /**
   * @param weakStats
   *            StatsMap for mapping metrics to weakly consistent values to use
   *            for metric stats.
   * @return the time of the last update of the {@link Metric}.
   */
  public abstract long lastUpdate(StatsMap weakStats);

  /** @return the current updateInterval estimate for updates of {@link Metric}. */
  public double updateInterval() {
    return updateInterval(StatsMap.emptyStats());
  }

  /**
   * @param weakStats
   *            StatsMap for mapping metrics to weakly consistent values to use
   *            for metric stats.
   * @return the updateInterval estimated for updates of the {@link Metric}.
   */
  public abstract double updateInterval(StatsMap weakStats);

  /** @return the estimated velocity of the {@link Metric}. */
  public double velocity() {
    return velocity(StatsMap.emptyStats());
  }

  /**
   * @param weakStats
   *            StatsMap for mapping metrics to weakly consistent values to use
   *            for metric stats.
   * @return the estimated velocity of the {@link Metric}.
   */
  public abstract double velocity(StatsMap weakStats);

  /** @return the estimated noise of the {@link Metric}. */
  public double noise() {
    return noise(StatsMap.emptyStats());
  }

  /**
   * @param weakStats
   *            StatsMap for mapping metrics to weakly consistent values to use
   *            for metric stats.
   * @return the estimated velocity of the {@link Metric}.
   */
  public abstract double noise(StatsMap weakStats);

  /**
   * Used to construct and enforce {@link MetricTreaty}s bounding this
   * {@link Metric}s value.
   * <p>
   * Implementations of this method should use "weak" estimates of value,
   * velocity, and noise to avoid contention issues. The internal
   * implementation is expected to have refreshed these estimates recently
   * prior to the call.
   *
   * @param value
   *            the value we're asserting equality with.
   * @param weakStats
   *            StatsMap for mapping metrics to weakly consistent values to use
   *            for metric stats.
   * @return a {@link EnforcementPolicy} that enforces this {@link Metric}
   *         being above bound.
   */
  public EnforcementPolicy equalityPolicy(double value, StatsMap weakStats, final Store s) {
    return new DirectPolicy();
  }

  /**
   * Used to construct and enforce {@link MetricTreaty}s bounding this
   * {@link Metric}s value.
   * <p>
   * Implementations of this method should use "weak" estimates of value,
   * velocity, and noise to avoid contention issues. The internal
   * implementation is expected to have refreshed these estimates recently
   * prior to the call.
   *
   * @param value
   *            the value we're asserting equality with.
   * @return a {@link EnforcementPolicy} that enforces this {@link Metric}
   *         being above bound.
   */
  public EnforcementPolicy equalityPolicy(double value, final Store s) {
    // This is only called if we're computing a new policy for a *pre-existing*
    // contract so this is when a coordination occurs in the protocol.
    return equalityPolicy(value, StatsMap.emptyStats(), s);
  }

  /**
   * Used to construct and enforce {@link MetricTreaty}s bounding this
   * {@link Metric}s value.
   * <p>
   * Implementations of this method should use "weak" estimates of value,
   * velocity, and noise to avoid contention issues. The internal
   * implementation is expected to have refreshed these estimates recently
   * prior to the call.
   *
   * @param bound
   *            a bound that the returned policy enforces.
   * @param weakStats
   *            StatsMap for mapping metrics to weakly consistent values to use
   *            for metric stats.
   * @return a {@link EnforcementPolicy} that enforces this {@link Metric}
   *         being above bound.
   */
  public EnforcementPolicy thresholdPolicy(double rate, double base, StatsMap weakStats, final Store s) {
    return new DirectPolicy();
  }

  /**
   * Used to construct and enforce {@link MetricTreaty}s bounding this
   * {@link Metric}s value.
   * <p>
   * Implementations of this method should use "weak" estimates of value,
   * velocity, and noise to avoid contention issues. The internal
   * implementation is expected to have refreshed these estimates recently
   * prior to the call.
   *
   * @param bound
   *            a bound that the returned policy enforces.
   * @return a {@link EnforcementPolicy} that enforces this {@link Metric}
   *         being above bound.
   */
  public EnforcementPolicy thresholdPolicy(double rate, double base, final Store s) {
    // This is only called if we're computing a new policy for a *pre-existing*
    // contract so this is when a coordination occurs in the protocol.
    return thresholdPolicy(rate, base, StatsMap.emptyStats(), s);
  }

  /**
   * Update the current "weak" estimates to be used by {@link #policy(Bound)}
   * @param weakStats
   *            StatsMap for mapping metrics to weakly consistent values to use
   *            for metric stats.
   */
  public StatsMap refreshWeakEstimates(StatsMap weakStats) {
    return refreshLocally(weakStats);
  }

  public StatsMap refreshWeakEstimates_remote(fabric.lang.security.Principal caller, StatsMap weakStats) {
    return refreshWeakEstimates(weakStats);
  }

  /**
   * Utility to allow for running updates as close to the metric as possible.
   * @param weakStats
   *            StatsMap for mapping metrics to weakly consistent values to use
   *            for metric stats.
   *
   * Ugh, public because we don't allow remote calls for non public methods.
   */
  public StatsMap refreshLocally(StatsMap weakStats) {
    return static_refreshLocally(this, weakStats);
  }

  private static StatsMap static_refreshLocally(Metric tmp, StatsMap weakStats) {
    Logging.METRICS_LOGGER.finest("REFRESHING LOCALLY " + tmp + " IN " + TransactionManager.getInstance().getCurrentLog() + " " + Thread.currentThread());
    if (TransactionManager.getInstance().inTxn()) {
      return weakStats.put(tmp,
          tmp.computeValue(weakStats),
          tmp.computeSamples(weakStats),
          tmp.computeLastUpdate(weakStats),
          tmp.computeUpdateInterval(weakStats),
          tmp.computeVelocity(weakStats),
          tmp.computeNoise(weakStats));
    } else {
      StatsMap result = null;
      atomic {
        result = weakStats.put(tmp,
            tmp.computeValue(weakStats),
            tmp.computeSamples(weakStats),
            tmp.computeLastUpdate(weakStats),
            tmp.computeUpdateInterval(weakStats),
            tmp.computeVelocity(weakStats),
            tmp.computeNoise(weakStats));
      }
      return result;
    }
  }

  public StatsMap refreshLocally_remote(fabric.lang.security.Principal caller, StatsMap weakStats) {
    return refreshLocally(weakStats);
  }

  /**
   * @param weakStats
   *            StatsMap for mapping metrics to weakly consistent values to use
   *            for metric stats.
   * @return a freshly computed weak value for this {@link DerivedMetric}.
   */
  protected abstract double computeValue(StatsMap weakStats);

  /**
   * @param weakStats
   *            StatsMap for mapping metrics to weakly consistent values to use
   *            for metric stats.
   * @return a freshly computed weak value for this {@link DerivedMetric}.
   */
  protected abstract long computeSamples(StatsMap weakStats);

  /**
   * @param weakStats
   *            StatsMap for mapping metrics to weakly consistent values to use
   *            for metric stats.
   * @return a freshly computed weak value for this {@link DerivedMetric}.
   */
  protected abstract long computeLastUpdate(StatsMap weakStats);

  /**
   * @param weakStats
   *            StatsMap for mapping metrics to weakly consistent values to use
   *            for metric stats.
   * @return a freshly computed weak value for this {@link DerivedMetric}.
   */
  protected abstract double computeUpdateInterval(StatsMap weakStats);

  /**
   * @param weakStats
   *            StatsMap for mapping metrics to weakly consistent values to use
   *            for metric stats.
   * @return a freshly computed weak velocity for this {@link DerivedMetric}.
   */
  protected abstract double computeVelocity(StatsMap weakStats);

  /**
   * @param weakStats
   *            StatsMap for mapping metrics to weakly consistent values to use
   *            for metric stats.
   * @return a freshly computed noise for this {@link DerivedMetric}.
   */
  protected abstract double computeNoise(StatsMap weakStats);

  /**
   * @return true iff all the sampling and transformations on this metric are
   *         stored on a single store.
   */
  public abstract boolean isSingleStore();

  /**
   * @param bound
   *        the bound that the contract will enforce on this
   *        {@link Metric}
   * @return a {@link MetricTreaty} asserting this metric satisfies the
   *       given bound.
   */
  protected MetricTreaty createThresholdTreaty(double rate, double base, long time) {
    Pair/*<TreatySet, MetricTreaty>*/ updated = $treaties.create(new ThresholdStatement(rate, base, time));
    if (!((TreatySet) updated.first).equals($treaties))
      $treaties = (TreatySet) updated.first;
    return (MetricTreaty) updated.second;
  }

  /**
   * @param bound
   *        the bound that the contract will enforce on this
   *        {@link Metric}
   * @return a {@link MetricTreaty} asserting this metric satisfies the
   *       given bound.
   */
  protected MetricTreaty createEqualityTreaty(double value) {
    Pair/*<TreatySet, MetricTreaty>*/ updated = $treaties.create(new EqualityStatement(value));
    if (!((TreatySet) updated.first).equals($treaties))
      $treaties = (TreatySet) updated.first;
    return (MetricTreaty) updated.second;
  }

  /*@Override*/
  public int compareTo(java.lang.Object that) {
    if (!(that instanceof Metric))
      return 0;
    Metric other = (Metric) that;
    int thisHash = hashCode();
    int thatHash = other.hashCode();
    if (thisHash == thatHash) {
      if (other.equals(this)) {
        return 0;
      } else {
        return toString().compareTo(other.toString());
      }
    }
    return thisHash - thatHash;
  }
}

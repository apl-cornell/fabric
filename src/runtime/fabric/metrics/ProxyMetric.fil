package fabric.metrics;

import fabric.worker.Store;
import fabric.worker.metrics.StatsMap;
import fabric.worker.metrics.proxies.ProxyMap;
import fabric.worker.metrics.treaties.MetricTreaty;
import fabric.worker.metrics.treaties.enforcement.EnforcementPolicy;
import fabric.worker.metrics.treaties.enforcement.WitnessPolicy;
import fabric.worker.metrics.treaties.statements.EqualityStatement;
import fabric.worker.metrics.treaties.statements.TreatyStatement;
import fabric.worker.metrics.treaties.statements.ThresholdStatement;

import com.google.common.collect.Multimap;
import com.google.common.collect.HashMultimap;

import fabric.common.exceptions.InternalError;

/**
 * A {@link DerivedMetric} that exists purely to proxy for another metric.
 */
public class ProxyMetric extends DerivedMetric {

  public ProxyMetric fabric$metrics$ProxyMetric$(Metric primary) {
    if (primary instanceof ProxyMetric) {
      // Avoid overly long proxy chains.
      primary = ((ProxyMetric) primary).term(0);
    }
    fabric$metrics$DerivedMetric$(new Metric native[] { primary });
    initialize();
    this.$associates = this.$associates.add(primary);
    return this;
  }

  /*@Override*/
  public Metric getProxy(Store s) {
    if ($getStore().equals(s))
      return this;
    return term(0).getProxy(s);
  }

  /*@Override*/
  public double computePresetR() {
    return term(0).getPresetR();
  }

  /*@Override*/
  public double computePresetB() {
    return term(0).getPresetB();
  }

  /*@Override*/
  public double computePresetV() {
    return term(0).getPresetV();
  }

  /*@Override*/
  public double computePresetN() {
    return term(0).getPresetN();
  }

  /*@Override*/
  protected double computeValue(StatsMap weakStats) {
    if (weakStats.containsKey(this)) return weakStats.getValue(this);
    return this.term(0).value(weakStats);
  }
  /*@Override*/
  protected double computeVelocity(StatsMap weakStats) {
    if (weakStats.containsKey(this)) return weakStats.getVelocity(this);
    return this.term(0).velocity(weakStats);
  }

  /*@Override*/
  protected double computeNoise(StatsMap weakStats) {
    if (weakStats.containsKey(this)) return weakStats.getNoise(this);
    return this.term(0).noise(weakStats);
  }

  /*@Override*/
  public EnforcementPolicy equalityPolicy(double value, StatsMap weakStats, final Store s) {
    // TODO: Is this right?
    Multimap/*<Metric, TreatyStatement>*/ witnesses = HashMultimap/*<>*/.create();
    witnesses.put(term(0), new EqualityStatement(value));
    return new WitnessPolicy(witnesses);
  }

  /*@Override*/
  public EnforcementPolicy thresholdPolicy(double rate, double base, StatsMap weakStats, final Store s) {
    // TODO: Is this right?
    Multimap/*<Metric, TreatyStatement>*/ witnesses = HashMultimap/*<>*/.create();
    witnesses.put(term(0), new ThresholdStatement(rate, base));
    return new WitnessPolicy(witnesses);
  }

  /*@Override*/
  public String toString() {
    return "Proxy at " + $getStore().toString() + " for " + term(0).toString();
  }

  /*@Override*/
  protected void createAndActivateThresholdTreaty(double rate, double base, long time, boolean proactive) {
    if (proactive) {
      term(0).createAndActivateTreaty(new ThresholdStatement(rate, base, time), proactive);
    } else {
      createThresholdTreaty(rate, base, time).update(false, StatsMap.emptyStats());
    }
  }
}

package fabric.metrics;

import fabric.util.Arrays;
import fabric.util.LinkedHashMap;
import fabric.util.Map;
import fabric.util.Iterator;

import fabric.common.ConfigProperties;
import fabric.metrics.contracts.Bound;
import fabric.metrics.contracts.MetricContract;
import fabric.metrics.contracts.enforcement.DirectPolicy;
import fabric.metrics.contracts.enforcement.EnforcementPolicy;
import fabric.metrics.contracts.enforcement.WitnessPolicy;
import fabric.metrics.util.Observer;
import fabric.metrics.util.Subject;

import fabric.worker.Store;
import fabric.worker.transaction.TransactionManager;

/**
 * A {@link DerivedMetric} for the sum of the given metric terms.
 */
public class SumMetric extends DerivedMetric {

    /**
     * @param store
     *            the {@link Store} that holds this {@link Metric}
     * @param terms
     *            The {@link Metric}s this applies to
     */
    public SumMetric fabric$metrics$SumMetric$(Metric native[] terms) {
        fabric$metrics$DerivedMetric$(terms);
        initialize();
        return this;
    }

    /*@Override*/
    public double computePresetR() {
        double result = 0;
        for (int i = 0; i < terms.length; i++) {
            result += terms[i].getPresetR();
        }
        return result;
    }

    /*@Override*/
    public double computePresetB() {
        double result = 0;
        for (int i = 0; i < terms.length; i++) {
            result += terms[i].getPresetB();
        }
        return result;
    }

    /*@Override*/
    public double computePresetV() {
        double result = 0;
        for (int i = 0; i < terms.length; i++) {
            result += terms[i].getPresetV();
        }
        return result;
    }

    /*@Override*/
    public double computePresetN() {
        double result = 0;
        for (int i = 0; i < terms.length; i++) {
            result += terms[i].getPresetN();
        }
        return result;
    }

    /*@Override*/
    protected double computeValue(boolean useWeakCache) {
        double result = 0;
        for (int i = 0; i < terms.length; i++) {
            result += terms[i].value(useWeakCache);
        }
        return result;
    }

    /*@Override*/
    protected double computeVelocity(boolean useWeakCache) {
        double result = 0;
        for (int i = 0; i < terms.length; i++) {
            result += terms[i].velocity(useWeakCache);
        }
        return result;
    }

    /*@Override*/
    protected double computeNoise(boolean useWeakCache) {
        double result = 0;
        for (int i = 0; i < terms.length; i++) {
            result += terms[i].noise(useWeakCache);
        }
        return result;
    }

    /*@Override*/
    public String toString() {
        String str = "(";
        boolean nonEmpty = false;
        for (int i = 0; i < terms.length; i++) {
            if (nonEmpty)
                str += " + ";
            nonEmpty = true;
            str += terms[i];
        }
        return str + ")@" + getStore();
    }

    /*@Override*/
    // Pushing down really messes with tree structure when sharing weak
    // estimation across subexpressions but not doing so causes handling
    // negation of multistore contracts to loop.  For now we push down. In the
    // future, we should improve handling of negated metrics to get the best of
    // both worlds.
    //
    // Note: The current design means that refreshLocally on a metric times(x)
    // is *not* enough to update weak estimates.
    public DerivedMetric times(double scalar) {
      Double s = Double.valueOf(scalar);
      DerivedMetric result = (DerivedMetric) getTimesCache().get(s);
      if (result == null) {
        result = static_times(this, scalar);
        if (TransactionManager.getInstance().inTxn()) {
          getTimesCache().put(s, result);
        } else {
          atomic {
            getTimesCache().put(s, result);
          }
        }
      }
      return result;
    }

    private static DerivedMetric static_times(SumMetric tmp, double scalar) {
        Metric native[] newTerms = new Metric native[tmp.terms.length];
        for (int i = 0; i < tmp.terms.length; i++)
          newTerms[i] = tmp.terms[i].times(scalar);
        final Store s = tmp.$getStore();
        DerivedMetric val = null;
        if (TransactionManager.getInstance().inTxn()) {
          val = new SumMetric@s().fabric$metrics$SumMetric$(newTerms);
        } else {
          atomic {
            val = new SumMetric@s().fabric$metrics$SumMetric$(newTerms);
          }
        }
        return Metric.findDerivedMetric(s, val);
    }

    /**
     * {@inheritDoc}
     * <p>
     * {@link SumMetric}s try to consolidate local computations so that there
     * isn't unnecessary nodes in the {@link Subject}-{@link Observer} tree for
     * {@link #handleUpdates()}.
     */
    // TODO: Combine shared terms with different coefficients.
    public DerivedMetric plus(Metric other) {
      DerivedMetric result = (DerivedMetric) getPlusCache().get(other);
      if (result == null) {
        result = static_plus(this, other);
        if (TransactionManager.getInstance().inTxn()) {
          getPlusCache().put(other, result);
          other.getPlusCache().put(this, result);
        } else {
          atomic {
            getPlusCache().put(other, result);
            other.getPlusCache().put(this, result);
          }
        }
      }
      return result;
    }

    private static DerivedMetric static_plus(SumMetric tmp, Metric other) {
        final Store s = tmp.$getStore();
        // Add in all of the terms of another sum, one by one
        if (other instanceof SumMetric && other.$getStore().equals(s)) {
            SumMetric that = (SumMetric) other;

            DerivedMetric result = tmp;
            for (int i = 0; i < that.terms.length; i++) {
                result = result.plus(that.terms[i]);
            }
            return result;
        }

        // If the leaves of the new term are all present in an existing term
        // computed on this store, add them together as a single term instead of
        // adding a new term. (This helps group together ScaledMetrics with the
        // same base term).
        int termIdx = -1;
        if (other instanceof DerivedMetric) {
            DerivedMetric derivedOther = (DerivedMetric) other;
            for (int i = 0; i < tmp.terms.length; i++) {
                if (!tmp.terms[i].$getStore().equals(other.$getStore()))
                    continue;
                if (tmp.terms[i] instanceof DerivedMetric) {
                    DerivedMetric derivedTerm = (DerivedMetric) tmp.terms[i];
                    if (Arrays.asList(derivedTerm.getLeafSubjects())
                            .containsAll(Arrays.asList(derivedOther.getLeafSubjects()))) {
                        termIdx = i;
                        break;
                    }
                } else {
                    SampledMetric sampledTerm = (SampledMetric) tmp.terms[i];
                    if (derivedOther.getLeafSubjects().length == 1
                            && Arrays.asList(derivedOther.getLeafSubjects())
                                    .contains(sampledTerm)) {
                        termIdx = i;
                        break;
                    }
                }
            }
        } else {
            SampledMetric sampledOther = (SampledMetric) other;
            for (int i = 0; i < tmp.terms.length; i++) {
                if (!tmp.terms[i].$getStore().equals(other.$getStore()))
                    continue;
                if (tmp.terms[i] instanceof DerivedMetric) {
                    DerivedMetric derivedTerm = (DerivedMetric) tmp.terms[i];
                    if (Arrays.asList(derivedTerm.getLeafSubjects()).contains(sampledOther)) {
                        termIdx = i;
                        break;
                    }
                } else {
                    SampledMetric sampledTerm = (SampledMetric) tmp.terms[i];
                    if (sampledTerm.equals(sampledOther)) {
                        termIdx = i;
                        break;
                    }
                }
            }
        }

        Metric native[] newTerms = null;
        if (termIdx >= 0) {
            newTerms = new Metric native[tmp.terms.length];
            for (int i = 0; i < tmp.terms.length; i++)
              newTerms[i] = tmp.terms[i];
            newTerms[termIdx] = newTerms[termIdx].plus(other);
        } else {
            newTerms = new Metric native[tmp.terms.length + 1];
            for (int i = 0; i < tmp.terms.length; i++)
              newTerms[i] = tmp.terms[i];
            newTerms[tmp.terms.length] = other;
            java.util.Arrays.sort(newTerms, 0, newTerms.length);
        }
        DerivedMetric val = null;
        if (TransactionManager.getInstance().inTxn()) {
          val = new SumMetric@s().fabric$metrics$SumMetric$(newTerms);
        } else {
          atomic {
            val = new SumMetric@s().fabric$metrics$SumMetric$(newTerms);
          }
        }
        return Metric.findDerivedMetric(s, val);
    }

    /*@Override*/
    public EnforcementPolicy policy(double rate, double base, boolean useWeakCache, final Store s) {
        // Don't do this if we want to avoid conflicts between local concurrent
        // operations on different metrics in a derived metric...
        //if (isSingleStore())
        //    return new DirectPolicy().fabric$metrics$contracts$enforcement$DirectPolicy$(this, bound);

        java.util.Map/*<Metric, MetricContract>*/ witnesses = new java.util.HashMap/*<>*/();

        long currentTime = System.currentTimeMillis();
        double baseNow = Bound.value(rate, base, currentTime);

        // Defend all rows against the bound individually, using the strictest
        // bounds across the rows for each term in this sum.
        double totalSamples = weakSamples();
        double totalValue = value(useWeakCache);
        double totalVelocity = velocity(useWeakCache);
        double totalNoise = noise(useWeakCache);
        double numTerms = terms.length;
        // TODO: Make the samples cutoff configurable.
        double baseFactor = totalSamples > 10 ? 1.0 / Math.sqrt(totalSamples) : 1.0;
        double newFactor = 1.0 - baseFactor;
        ConfigProperties config = Worker.getWorker().config;
        if (config.usePreset) {
          baseFactor = 0.0;
          newFactor = 1.0;
        }

        // For each term, update the associated bounds to be the tightest
        // bound set across the rows
        for (int j = 0; j < numTerms; j++) {
            Metric m = term(j);
            double scaledX = m.value(useWeakCache);
            double scaledV = m.velocity(useWeakCache);
            double scaledN = m.noise(useWeakCache);
            // Corrected for the way this metric is shifting relative to
            // the rest of the sum
            double r = (scaledV * newFactor) - (((totalVelocity * newFactor) - rate) / numTerms);

            double b = scaledX - (((baseFactor / numTerms) + (newFactor * (scaledN / totalNoise))) * (totalValue - baseNow));
            if (totalNoise != 0) {
              b = scaledX - ((scaledN / totalNoise) * (totalValue - baseNow));
            }

            // If using presets, use that instead
            if (getUsePreset()) {
              r = m.getPresetR();
              b = scaledX - ((m.getPresetB() / getPresetB()) * (totalValue - baseNow));
            }

            double native[] normalized = Bound.createBound(r, b, currentTime);
            if (!witnesses.containsKey(m)
                    || !((MetricContract) witnesses.get(m)).implies(m, normalized[0], normalized[1])) {
                witnesses.put(m, m.getContract(r, b, currentTime));
            }
        }
        MetricContract native[] finalWitnesses = new MetricContract native[witnesses.size()];
        int i = 0;
        for (java.util.Iterator iter = witnesses.values().iterator(); iter.hasNext();) {
          finalWitnesses[i++] = (MetricContract) iter.next();
        }
        return new WitnessPolicy@s().fabric$metrics$contracts$enforcement$WitnessPolicy$(finalWitnesses);
    }

    /*@Override*/
    public int hashCode() {
        return Arrays.hashCode(terms) * 32 + getStore().hashCode();
    }

    /*@Override*/
    public boolean equals(Object other) {
        if (other instanceof SumMetric) {
            SumMetric that = (SumMetric) other;
            return Arrays.deepEquals(this.terms, that.terms)
                    && this.$getStore().equals(that.$getStore());
        }
        return false;
    }
}

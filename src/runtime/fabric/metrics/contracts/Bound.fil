package fabric.metrics.contracts;

import fabric.metrics.Metric;

import fabric.worker.Store;

/**
 * A linear time-varying bound that can be applied to a {@link Metric}'s value
 * and enforced by a treaty of
 * <code>&gt;= r * (t - startTime) + b</code>.
 */
public class Bound {

  /** Create a normalized bound. */
  public static double native[] createBound(double rate, double base) {
    return createBound(rate, base, 0);
  }

  /** Create a normalized bound. */
  public static double native[] createBound(double rate, double base,
      long startTime) {
    if (Double.isNaN(rate) || Double.isNaN(base)) {
      throw new RuntimeException("This shouldn't happen");
    }
    return new double native[] { rate, base - (rate * startTime) };
  }

  /**
   * Compute a value given the rate, base, starting time (for base), and
   * current time.
   */
  public static double value(double rate, double base, long startTime,
      long curTime) {
    long dt = curTime - startTime;
    return (rate * dt) + base;
  }

  /**
   * Compute a value given the rate, base, and current time.
   */
  public static double value(double rate, double base, long time) {
    return value(rate, base, 0, time);
  }

  /**
   * Compute the time at which this bound will expire given the current value
   * and time.
   */
  public static long trueExpiry(double rate, double base, double value, long time) {
    if (rate > 0) {
      return (long) (time + (value - value(rate, base, time)) / rate);
    } else if (value < value(rate, base, time)) {
      return 0;
    }
    return Long.MAX_VALUE;
  }

  /**
   * Determine if the given value x is above the bound at the given time.
   */
  public static boolean test(double rate, double base, double x, long time) {
    return x >= value(rate, base, time);
  }
}

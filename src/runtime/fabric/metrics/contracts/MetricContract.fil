package fabric.metrics.contracts;

import fabric.util.Collections;
import fabric.util.Set;

import fabric.metrics.DerivedMetric;
import fabric.metrics.Metric;
import fabric.metrics.SampledMetric;
import fabric.metrics.contracts.enforcement.EnforcementPolicy;
import fabric.metrics.contracts.enforcement.WitnessPolicy;
import fabric.metrics.util.Observer;
import fabric.metrics.util.Subject;

import fabric.common.TransactionID;
import fabric.worker.Store;
import fabric.worker.transaction.TransactionManager;
import java.util.logging.Level;

/**
 * A contract asserting that a {@link Metric}'s value is above or below a
 * vectorized boundary expression <code>r⃗ * (t - startTime) + b⃗</code> until
 * the associated expriation time.
 * <p>
 * This class follows the subject-observer pattern. An instance is an observer
 * of either a {@link Metric} or a set of {@link MetricContract}s and can be
 * observed by other {@link Contract}s.
 */
public class MetricContract extends Contract {

  protected final Metric metric;
  protected final Bound bound;
  protected EnforcementPolicy currentPolicy;

  /**
   * @param metric
   *        the {@link Metric} this contract asserts a bound on
   * @param bound
   *        the {@link Bound} this {@link MetricContract} asserts on
   *        metric.
   */
  public MetricContract fabric$metrics$contracts$MetricContract$(Metric metric, Bound bound) {
    this.metric = metric;
    this.bound = new Bound().fabric$metrics$contracts$Bound$(bound.rate, bound.base, 0);
    fabric$metrics$contracts$Contract$();
    return this;
  }

  /** @return the {@link Metric} that this contract observes. */
  public Metric getMetric() {
    return metric;
  }

  /** @return the {@link Bound} that this contract observes. */
  public Bound getBound() {
    return bound;
  }

  /**
   * @return the expected lifetime of this {@link MetricContract} given the
   *       associated {@link Metric}s current velocity.
   */
  public long getExpectedLifetime() {
    long time = System.currentTimeMillis();
    Metric m = getMetric();
    Bound bound = getBound();
    double adjustedRate = bound.rate - m.velocity();
    return (long) (time + ((m.value() - bound.value(time)) / adjustedRate));
  }

  public void activate_remote(fabric.lang.security.Principal caller) {
    activate();
  }

  /*@Override*/
  public void activate() {
    static_activate(this);
  }

  private static void static_activate(MetricContract tmp) {
    if (TransactionManager.getInstance().inTxn()) {
      if (tmp.isActivated())
        return;
    } else {
      atomic {
        if (tmp.isActivated())
          return;
      }
    }

    // Refresh the stats being used
    // Commented out for now.  If it's run here it's going to repeat work in
    // subcalls.
    //metric.refreshWeakEstimates();

    // Determine children
    fabric.common.Logging.METRICS_LOGGER.finer("CREATING A POLICY FOR MC " + tmp);
    EnforcementPolicy startPol = null;
    if (TransactionManager.getInstance().inTxn()) {
      startPol = tmp.metric.policy(tmp.bound, true);
    } else {
      atomic {
        startPol = tmp.metric.policy(tmp.bound, true);
      }
    }

    // Activate new children
    fabric.common.Logging.METRICS_LOGGER.finer("ACTIVATING POLICY FOR MC " + tmp);
    startPol.activate();

    // Set the expiry and free it up
    tmp.finishActivating(startPol);
  }

  public void finishActivating(EnforcementPolicy p) {
    static_finishActivating(this, p);
  }

  private static void static_finishActivating(MetricContract tmp, EnforcementPolicy p) {
    // Set the expiry and free it up
    if (TransactionManager.getInstance().inTxn()) {
      fabric.common.Logging.METRICS_LOGGER.finer("ACTIVATING MC " + tmp + " IN " + TransactionManager.getInstance().getCurrentLog());
      tmp.currentPolicy = p;
      tmp.$expiry = tmp.currentPolicy.expiry();
      Contract.static_activate(tmp);
      if (tmp.$expiry >= System.currentTimeMillis()) {
        tmp.currentPolicy.apply(tmp);
        tmp.getMetric().addContract(tmp);
      }
    } else {
      atomic {
        fabric.common.Logging.METRICS_LOGGER.finer("ACTIVATING MC " + tmp + " IN " + TransactionManager.getInstance().getCurrentLog());
        tmp.currentPolicy = p;
        tmp.$expiry = tmp.currentPolicy.expiry();
        Contract.static_activate(tmp);
        if (tmp.$expiry >= System.currentTimeMillis()) {
          tmp.currentPolicy.apply(tmp);
          tmp.getMetric().addContract(tmp);
        }
      }
    }
    fabric.common.Logging.METRICS_LOGGER.finer("ACTIVATED MC " + tmp + " IN " + TransactionManager.getInstance().getCurrentLog());
  }

  public void finishActivating_remote(fabric.lang.security.Principal caller, EnforcementPolicy p) {
    finishActivating(p);
  }

  /**
   * Update this contract's expiration time to stay valid in response to a
   * change in the value of the {@link Subject}s used for enforcing this
   * {@link Contract}. Revokes, extends, and updates the enforcement strategy
   * as needed.
   */
  /*@Override*/
  protected boolean refresh(boolean asyncExtension) {
    // If we haven't activated yet, this is a bad operation.  Stop.
    if (!isActivated()) {
      fabric.common.Logging.METRICS_LOGGER.log(Level.FINER, "CONTRACT INACTIVE");
      return false;
    }

    long currentTime = System.currentTimeMillis();
    // Refresh the current policy and update to the new expiration time
    // if it's long enough.
    if (currentPolicy != null) {
      long curExpiry = currentPolicy.expiry();
      if (curExpiry >= currentTime) {
        boolean result = update(curExpiry);
        fabric.common.Logging.METRICS_LOGGER.log(Level.FINER, "DEFENDING " + this + " WITH " + currentPolicy);
        return result;
      }
    }
    // Async extensions should only update to a new expiry using the existing
    // policy.
    if (asyncExtension)
      return false;

    // Otherwise we're finding a new policy, so we're coordinating.
    fabric.common.Logging.METRICS_LOGGER.fine("COORDINATING FOR " + this + " " + bound + " IN " + TransactionManager.getInstance().getCurrentTid());

    // If we're moving to a new policy we need to be holding the reconfig locks.
    TransactionManager tm = TransactionManager.getInstance();
    if (!this.lock.held()) {
      // If we're not holding it, mark this as needing to be acquired and retry.
      tm.addContractToAcquire(this);
      TransactionID current = tm.getCurrentTid();
      if (current != null) {
        while (current.parent != null) current = current.parent;
        throw new TransactionRestartingException(
            new TransactionID(current.topTid));
      }
    }

    // Find a new policy now that we have the lock.
    EnforcementPolicy oldPolicy = currentPolicy;
    EnforcementPolicy newPolicy = metric.policy(bound);

    // Wait to unapply so that metric is still tracked if this was
    // directly enforced previously
    if (oldPolicy != null && !oldPolicy.equals(newPolicy))
      oldPolicy.unapply(this);
    currentPolicy = newPolicy;
    currentPolicy.activate();
    // Don't apply if the new policy is already expired.
    long newExpiry = currentPolicy.expiry();
    boolean result = update(newExpiry);
    if (newExpiry >= currentTime)
      currentPolicy.apply(this);
    fabric.common.Logging.METRICS_LOGGER.log(Level.FINER, "CONTRACT TRUE");
    return result;
  }

  /**
   * Check if this implies another {@link MetricContract} being considered.
   *
   * @param otherMetric
   *        the {@link Metric} the other {@link MetricContract} would
   *        assert a bound on
   * @param otherBound
   *        the {@link Bound} that would be used by the other
   *        {@link MetricContract}
   * @return true iff this would imply (and therefore) can enforce another
   *       {@link MetricContract} with the given metric and bound.
   */
  public boolean implies(Metric otherMetric, Bound otherBound) {
    if (!getMetric().equals(otherMetric) || !bound.implies(otherBound))
      return false;
    return valid();
  }

  /**
   * Check if this implies the other {@link MetricContract}.
   *
   * @param other
   *        the other {@link MetricContract} this is being compared with
   * @return true iff this would imply (and therefore) can enforce other for
   *       the entire duration of other.
   */
  public boolean implies(MetricContract other) {
    return valid(other.getExpiry())
        && implies(other.getMetric(), other.getBound());
  }

  /**
   * Check if this enforces the <strong>same</strong> bound as another
   * {@link MetricContract} being considered. Attempts to refresh this
   * contract if it's gone stale and would otherwise enforce the bound.
   *
   * @param otherMetric
   *        the {@link Metric} the other {@link MetricContract} would
   *        assert a bound on
   * @param otherBound
   *        the {@link Bound} that would be used by the other
   *        {@link MetricContract}
   * @return true iff this enforces another {@link MetricContract} with the
   *       given parameters.
   */
  public boolean enforces(Metric otherMetric, Bound otherBound) {
    if (!getMetric().equals(otherMetric) || !bound.equals(otherBound))
      return false;
    return valid();
  }

  /*@Override*/
  public String toString() {
    return getMetric().toString() + " " + bound + " until " + getExpiry();
  }

  /*@Override*/
  public SampledMetric[] getLeafSubjects() {
    Metric m = getMetric();
    if (m instanceof SampledMetric) {
      return new SampledMetric[0];
    } else if (m instanceof DerivedMetric) {
      return ((DerivedMetric) m).getLeafSubjects();
    } else {
      throw new IllegalStateException(
          "All metrics should be either sampled or derived!");
    }
  }

  /**
   * {@inheritDoc}
   *
   * Stops observing any evidence used by the current enforcement policy (by
   * unapplying the policy).
   */
  /*@Override*/
  public void removeObserver(Observer obs) {
    static_removeObserver(this, obs);
  }

  private static void static_removeObserver(MetricContract tmp, Observer obs) {
    if (TransactionManager.getInstance().inTxn()) {
      Contract.static_removeObserver(tmp, obs);
      if (!tmp.isObserved()) {
        if (tmp.currentPolicy != null)
          tmp.currentPolicy.unapply(tmp);
      }
    } else {
      atomic {
        Contract.static_removeObserver(tmp, obs);
        if (!tmp.isObserved()) {
          if (tmp.currentPolicy != null)
            tmp.currentPolicy.unapply(tmp);
        }
      }
    }
  }

  /*@Override*/
  public void acquireReconfigLocks() {
    fabric.common.Logging.METRICS_LOGGER.finer("ACQUIRING LOCK AT " + this + " IN " + TransactionManager.getInstance().getCurrentLog());
    this.lock.acquire();
    this.currentPolicy.acquireReconfigLocks();
  }

  /**
   * Create a proxy for this contract on the given store.
   */
  public ProxyMetricContract getProxyContract(final Store proxyStore) {
    return static_getProxyContract(this, proxyStore);
  }

  private static ProxyMetricContract static_getProxyContract(MetricContract tmp, final Store proxyStore) {
    ProxyMetricContract proxy = null;
    if (TransactionManager.getInstance().inTxn()) {
      proxy = new ProxyMetricContract@proxyStore().fabric$metrics$contracts$MetricContract$ProxyMetricContract$(tmp);
    } else {
      atomic {
        proxy = new ProxyMetricContract@proxyStore().fabric$metrics$contracts$MetricContract$ProxyMetricContract$(tmp);
      }
    }
    if (tmp.isActivated())
      proxy.activate();
    return proxy;
  }

  /**
   * A MetricContract which basically acts as a proxy for another MetricContract
   * to allow local access on another store while the contract is valid.
   *
   * Basically operates by using the original MetricContract as the only witness
   * of this metric contract.
   */
  protected static class ProxyMetricContract extends MetricContract {

    // The MetricContract this acts as a proxy for.
    protected final MetricContract target;

    /**
     * @param metric
     *        the {@link Metric} this contract asserts a bound on
     * @param bound
     *        the {@link Bound} this {@link MetricContract} asserts on
     *        metric.
     */
    public ProxyMetricContract fabric$metrics$contracts$MetricContract$ProxyMetricContract$(MetricContract target) {
      this.target = target;
      fabric$metrics$contracts$MetricContract$(target.metric, target.bound);
      return this;
    }

    /*@Override*/
    public void activate() {
      static_activate(this);
    }

    private static void static_activate(ProxyMetricContract tmp) {
      if (TransactionManager.getInstance().inTxn()) {
        if (tmp.isActivated())
          return;
      } else {
        atomic {
          if (tmp.isActivated())
            return;
        }
      }

      // TODO: Should this watch the target or just mirror the target's policy.
      EnforcementPolicy targetPol = null;
      fabric.common.Logging.METRICS_LOGGER.finer("CREATING POLICY FOR MC " + tmp);
      if (TransactionManager.getInstance().inTxn()) {
        final Store s = tmp.$getStore();
        targetPol = new WitnessPolicy@s().fabric$metrics$contracts$enforcement$WitnessPolicy$(new MetricContract native[] { tmp.target });
      } else {
        atomic {
          final Store s = tmp.$getStore();
          targetPol = new WitnessPolicy@s().fabric$metrics$contracts$enforcement$WitnessPolicy$(new MetricContract native[] { tmp.target });
        }
      }
      fabric.common.Logging.METRICS_LOGGER.finer("ACTIVATING POLICY FOR MC " + tmp);
      targetPol.activate();

      if (TransactionManager.getInstance().inTxn()) {
        fabric.common.Logging.METRICS_LOGGER.finer("ACTIVATING MC " + tmp + " IN " + TransactionManager.getInstance().getCurrentLog());
        final Store s = tmp.$getStore();
        tmp.currentPolicy = targetPol;
        tmp.$expiry = tmp.currentPolicy.expiry();
        Contract.static_activate(tmp);
        if (tmp.$expiry >= System.currentTimeMillis()) {
          tmp.currentPolicy.apply(tmp);
          // XXX: Do I need to do this?
          tmp.getMetric().addContract(tmp);
        }
      } else {
        atomic {
          fabric.common.Logging.METRICS_LOGGER.finer("ACTIVATING MC " + tmp + " IN " + TransactionManager.getInstance().getCurrentLog());
          final Store s = tmp.$getStore();
          tmp.currentPolicy = targetPol;
          tmp.$expiry = tmp.currentPolicy.expiry();
          Contract.static_activate(tmp);
          if (tmp.$expiry >= System.currentTimeMillis()) {
            tmp.currentPolicy.apply(tmp);
            // XXX: Do I need to do this?
            tmp.getMetric().addContract(tmp);
          }
        }
      }
      fabric.common.Logging.METRICS_LOGGER.finer("ACTIVATED MC " + tmp + " IN " + TransactionManager.getInstance().getCurrentLog());
    }

    /*@Override*/
    protected boolean refresh(boolean asyncExtension) {
      // If we haven't activated yet, this is a bad operation.  Stop.
      if (!isActivated()) {
        fabric.common.Logging.METRICS_LOGGER.log(Level.FINER, "CONTRACT INACTIVE");
        return false;
      }

      long currentTime = System.currentTimeMillis();
      // Refresh the current policy and update to the new expiration time
      // if it's long enough.
      if (currentPolicy != null) {
        long curExpiry = currentPolicy.expiry();
        boolean result = update(curExpiry);
        fabric.common.Logging.METRICS_LOGGER.log(Level.FINER, "DEFENDING " + this + " WITH " + currentPolicy);
        return result;
      }

      // Proxy's don't switch policies if the above didn't work, it's dead and
      // keeps the current expiration.
      return false;
    }

    /*@Override*/
    public String toString() {
      return "Proxy @ " + $getStore() + " for " + target + " until " + $expiry;
    }

    /*@Override*/
    public ProxyMetricContract getProxyContract(final Store proxyStore) {
      return static_getProxyContract(this, proxyStore);
    }

    private static ProxyMetricContract static_getProxyContract(ProxyMetricContract tmp, final Store proxyStore) {
      ProxyMetricContract proxy = null;
      if (TransactionManager.getInstance().inTxn()) {
        proxy = new ProxyMetricContract@proxyStore().fabric$metrics$contracts$MetricContract$ProxyMetricContract$(tmp.target);
      } else {
        atomic {
          proxy = new ProxyMetricContract@proxyStore().fabric$metrics$contracts$MetricContract$ProxyMetricContract$(tmp.target);
        }
      }
      if (tmp.isActivated())
        proxy.activate();
      return proxy;
    }
  }
}

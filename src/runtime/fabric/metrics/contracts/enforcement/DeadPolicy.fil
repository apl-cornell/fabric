package fabric.metrics.contracts.enforcement;

import fabric.metrics.contracts.Contract;

/**
 * A policy indicating there is no way to enforcing a {@link Contract}.
 */
public class DeadPolicy implements EnforcementPolicy {

  /**
   * @param metric
   *            the Metric the associated contract is bounding.
   * @param rate
   *            the rate of the bound enforced by the associated contract.
   * @param base
   *            the base of the bound enforced by the associated contract.
   */
  public DeadPolicy fabric$metrics$contracts$enforcement$DeadPolicy$() {
    fabric$lang$Object$();
    return this;
  }


  /**
   * @return the exipration time of this {@link EnforcementPolicy}.
   */
  public long expiry() {
    return 0;
  }

  /**
   * Update book-keeping to use this {@link EnforcementPolicy} for the given
   * {@link Contract}. This will add the given {@link Contract} as
   * an {@link metrics.util.Observer Observer} of the necessary
   * {@link metrics.util.Subject Subject}s to use the policy.
   *
   * @param mc
   *        the {@link Contract} to apply this policy to.
   */
  public void apply(Contract mc) {
  }

  /**
   * Update book-keeping to stop using this {@link EnforcementPolicy} for the
   * given {@link Contract}. This will remove the given
   * {@link Contract} as an {@link metrics.util.Observer Observer} of
   * the necessary {@link metrics.util.Subject Subject}s to use the policy.
   *
   * @param mc
   *        the {@link Contract} to stop applying this policy to.
   */
  public void unapply(Contract mc) {
  }

  /**
   * Activate this policy, activating witnesses and setting the expiry.
   */
  public void activate() {
  }

  /**
   * Acquire reconfig locks for the evidence used for this policy.
   */
  public void acquireReconfigLocks() {
  }
}

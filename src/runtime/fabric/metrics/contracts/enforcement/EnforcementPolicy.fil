package fabric.metrics.contracts.enforcement;

import fabric.metrics.contracts.MetricContract;

/**
 * A policy for enforcing a {@link MetricContract}. This class is responsible
 * for ensuring a {@link MetricContract} (and the API implementation) is
 * monitoring evidence of the {@link MetricContract}'s validity and updating the
 * expiration time correctly. It effectively acts as a bundle of the currently
 * monitored information for enforcing a {@link MetricContract}.
 */
public interface EnforcementPolicy {

  /**
   * @return the exipration time of this {@link EnforcementPolicy}.
   */
  public abstract long expiry();

  /**
   * Update book-keeping to use this {@link EnforcementPolicy} for the given
   * {@link MetricContract}. This will add the given {@link MetricContract} as
   * an {@link metrics.util.Observer Observer} of the necessary
   * {@link metrics.util.Subject Subject}s to use the policy.
   *
   * @param mc
   *        the {@link MetricContract} to apply this policy to.
   */
  public abstract void apply(MetricContract mc);

  /**
   * Update book-keeping to stop using this {@link EnforcementPolicy} for the
   * given {@link MetricContract}. This will remove the given
   * {@link MetricContract} as an {@link metrics.util.Observer Observer} of
   * the necessary {@link metrics.util.Subject Subject}s to use the policy.
   *
   * @param mc
   *        the {@link MetricContract} to stop applying this policy to.
   */
  public abstract void unapply(MetricContract mc);

  /**
   * Activate this policy, activating witnesses and setting the expiry.
   */
  public abstract void activate();

  /**
   * Acquire reconfig locks for the evidence used for this policy.
   */
  // Don't need it, as it turns out.
  //public abstract void acquireReconfigLocks();
}

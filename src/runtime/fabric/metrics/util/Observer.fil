package fabric.metrics.util;

import fabric.util.Set;

import fabric.metrics.Metric;
import fabric.metrics.SampledMetric;
import fabric.worker.metrics.ImmutableMetricsVector;
import fabric.worker.metrics.ImmutableObserverSet;
import fabric.common.util.LongSet;

/**
 * Abstraction for tracking trees of observers/subjects. Unifies tracking
 * of {@link Metric} trees.
 * <p>
 * An {@link Observer} can be attached to {@link Subject}s. When
 * {@link Subject}s the {@link Observer} are associated with are updated,
 * {@link #handleUpdates()} is called to determine if the {@link Observer} has
 * meaningfully changed as a result.
 */
public interface Observer {

  /**
   * Handles observation of subjects. This is called whenever any associated
   * {@link Subject}s are changed prior to the transaction completing.
   *
   * @param includesObserver
   *        flag indicating if the observer itself needs to update.
   * @param treaties
   *        set of treaty ids to run updates for.
   * @return the set of observers that should handle updates based on the
   * results of this update processing.
   */
  public ImmutableObserverSet handleUpdates(boolean includesObserver, LongSet treaties);

  /**
   * Used by {@link AbstractSubject#processSamples} to determine if all
   * dependencies have been processed before this {@link Observer} is
   * processed using {@link #handleUpdates()}.
   *
   * @return the set of {@link SampledMetric}s (the leaf of all
   *         {@link Subject}-{@link Observer} trees in this API) this
   *         {@link Observer} is associated with (a parent of/tracking) either
   *         directly or indirectly in the System.
   */
  public ImmutableMetricsVector/*<SampledMetric>*/ getLeafSubjects();
}

package fabric.metrics.util;

import fabric.common.TransactionID;
import fabric.worker.transaction.TransactionManager;
import fabric.worker.metrics.LockConflictException;

import fabric.common.Logging;
import java.util.logging.Level;

/**
 * Utility class acting as a lock for Contracts to help with reconfigurations.
 */
public class ReconfigLock {

  private boolean currentlyHeld;

  /**
   * @param startValue
   *        initial guess for the mean of the value we're keeping
   *        statistics on.
   */
  public ReconfigLock fabric$metrics$util$ReconfigLock$() {
    fabric$lang$Object$();
    this.currentlyHeld = false;
    TransactionManager tm = TransactionManager.getInstance();
    tm.registerLockCreate(this);
    return this;
  }

  /**
   * Check if we currently own the lock.
   */
  public boolean held() {
    return TransactionManager.getInstance().hasLock(this);
  }

  /**
   * Check that this item hasn't been locked by another process.
   */
  public void checkForRead() {
    TransactionManager tm = TransactionManager.getInstance();
    Logging.METRICS_LOGGER.log(Level.FINE, "CHECKING READ OF {0} IN {1}",
        new java.lang.Object native[] { this, tm.getCurrentTid() });
    if (currentlyHeld && !tm.hasLock(this) && tm.inTxn()) {
      // TODO Should this ever be called outside a transaction?
      tm.registerLockConflict(this);
    }
  }

  /**
   * Optimistic acquire the lock.
   */
  public void acquireOptimistic() {
    TransactionManager tm = TransactionManager.getInstance();
    Logging.METRICS_LOGGER.log(Level.FINE,
        "ATTEMPTING OPTIMISTIC ACQUIRE OF {0} IN {1}",
        new java.lang.Object native[] { this, tm.getCurrentTid() });
    if (!tm.hasLock(this)) {
      if (!currentlyHeld) {
        tm.registerLockAcquire(this);
        // Optimistic, don't write it.  If we retry, we'll acquire it then.
      } else {
        tm.registerLockConflict(this);
      }
    }
  }

  /**
   * Acquire the lock.
   */
  public void acquire() {
    TransactionManager tm = TransactionManager.getInstance();
    Logging.METRICS_LOGGER.log(Level.FINE, "ATTEMPTING ACQUIRE OF {0} IN {1}",
        new java.lang.Object native[] { this, tm.getCurrentTid() });
    if (!tm.hasLock(this)) {
      if (!currentlyHeld) {
        tm.registerLockAcquire(this);
        currentlyHeld = true;
      } else {
        tm.registerLockConflict(this);
      }
    }
  }

  /**
   * Release the lock.
   */
  public void release() {
    if (currentlyHeld) {
      currentlyHeld = false;
      TransactionManager.getInstance().registerLockRelease(this);
    }
  }
}

package fabric.metrics.util;

import fabric.util.Collection;
import fabric.util.List;
import fabric.worker.metrics.ImmutableObserverSet;

/**
 * Represents an observable object that can be monitored by {@link Observer}s.
 * After a {@link Subject} changes, the API uses the current set of
 * {@link Observer}s returned by {@link #getObservers()} to compute resulting
 * changes for {@link Observer}s due to the update.
 */
public interface Subject {

  /**
   * Adds an observer to the set of observers for this object. Nothing is done
   * if the given observer {@link #equals(Object) equals} an existing
   * observer.
   *
   * @param o
   *        {@link Observer} to add
   */
  public void addObserver(Observer o);

  /**
   * Adds an observer to the set of observers for this object. Nothing is done
   * if the given observer {@link #equals(Object) equals} an existing
   * observer.
   *
   * @param o
   *        {@link Observer} to add
   * @param id
   *        id of a treaty in the observer.
   */
  public void addObserver(Observer o, long id);

  /**
   * Removes an observer from the set of observers of this object.
   *
   * @param o
   *        {@link Observer} to remove
   */
  public void removeObserver(Observer o);

  /**
   * Removes an observer from the set of observers of this object.
   *
   * @param o
   *        {@link Observer} to remove
   * @param id
   *        id of a treaty in the observer.
   */
  public void removeObserver(Observer o, long id);

  /**
   * @param o
   *        an observer that might observe this subject.
   * @return true iff o observes this subject.
   */
  public boolean observedBy(Observer o);

  /**
   * @return true iff there are any observers of this subject, currently.
   */
  public boolean isObserved();

  /**
   * @return the set of the current observers of this subject.
   */
  public ImmutableObserverSet getObservers();
}

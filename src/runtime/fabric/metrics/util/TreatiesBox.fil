package fabric.metrics.util;

import fabric.metrics.Metric;
import fabric.worker.metrics.ImmutableMetricsVector;
import fabric.worker.metrics.ImmutableObjectSet;
import fabric.worker.metrics.ImmutableObserverSet;
import fabric.worker.metrics.treaties.TreatySet;
import java.util.SortedSet;

/**
 * Utility to make treaties and observers exist outside of metrics for the
 * purposes of managing contention and conflicts between transactions.
 *
 * This acts as a proxy for the Metric's treaties and observers.
 * TODO: Should this still be a proxy?
 */
public class TreatiesBox {

  public final Metric owner;

  // Remember to resolve this later...
  public transient TreatySet treaties;

  public TreatiesBox fabric$metrics$util$TreatiesBox$(Metric m) {
    this.owner = m;
    fabric$lang$Object$();
    this.$associates = ImmutableObjectSet.emptySet().add(m);
    // TODO: add treaties as associates as they get added.
    this.treaties = TreatySet.emptySet(this);
    return this;
  }
}

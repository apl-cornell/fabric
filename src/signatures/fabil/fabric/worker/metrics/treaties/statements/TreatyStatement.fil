package fabric.worker.metrics.treaties.statements;

import java.io.Serializable;

import fabric.metrics.Metric;
import fabric.metrics.treaties.Treaty;
import fabric.worker.Store;
import fabric.worker.metrics.StatsMap;
import fabric.worker.metrics.treaties.enforcement.EnforcementPolicy;

/**
 * A statement treaties can express on a metric
 */
public abstract class TreatyStatement implements Serializable, fabric.lang.JavaInlineable {

  /**
   * @param m the metric we want a direct expiry relative to.
   * @return the expiry to be used as determined by the value of m
   */
  public abstract long directExpiry(Metric m, StatsMap weakStats);

  /**
   * @param m the metric we want a true expiry relative to.
   * @return the "true" expiry at which the statement will become false in the
   * absence of updates to m.
   */
  public abstract long trueExpiry(Metric m, StatsMap weakStats);

  /**
   * @param v the value we want a true expiry relative to.
   * @return the "true" expiry at which the statement will become false relative
   * to v.
   */
  public abstract long trueExpiry(double v);

  /**
   * Check if this statement implies another statement.
   */
  public abstract boolean implies(TreatyStatement stmt);

  /**
   * Get a new policy for enforcing this statement on the given metric.
   */
  public abstract EnforcementPolicy getNewPolicy(Metric m, StatsMap weakStats);

  /**
   * Get a proxy treaty for the same statement on the given store.
   */
  public abstract Treaty getProxy(Metric m, Store s);

  /**
   * Check if the statement is true of the given metric.
   */
  public abstract boolean check(Metric m);
}
